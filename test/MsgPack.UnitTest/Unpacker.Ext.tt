<#
//
// MessagePack for CLI
//
// Copyright (C) 2010-2013 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#

var fixVariations =
	new []
	{
		// Label, Headers, Value Length
		Tuple.Create( "FixExt", "0xD4, {0}", 1 ),
		Tuple.Create( "FixExt", "0xD5, {0}", 2 ),
		Tuple.Create( "FixExt", "0xD6, {0}", 4 ),
		Tuple.Create( "FixExt", "0xD7, {0}", 8 ),
		Tuple.Create( "FixExt", "0xD8, {0}", 16 ),
	};

var variableVariations =
	new []
	{
		// Label, Header Format, Length of Length, Actual Value Length
		Tuple.Create( "Ext8", "0xC7, {0}, 0", 1, 0 ),
		Tuple.Create( "Ext8", "0xC7, {0}, 1", 1, 1 ),
		Tuple.Create( "Ext8", "0xC7, {0}, 17", 1, 17 ),
		Tuple.Create( "Ext8", "0xC7, {0}, 0xFF", 1, 0xFF ),
		Tuple.Create( "Ext16", "0xC8, {0}, 0", 2, 0 ),
		Tuple.Create( "Ext16", "0xC8, {0}, 1", 2, 1 ),
		Tuple.Create( "Ext16", "0xC8, {0}, 17", 2, 17 ),
		Tuple.Create( "Ext16", "0xC8, {0}, 0xFF", 2, 0xFF ),
		Tuple.Create( "Ext16", "0xC8, {0}, 1, 0", 2, 0x100 ),
		Tuple.Create( "Ext16", "0xC8, {0}, 0xFF, 0xFF", 2, 0xFFFF ),
		Tuple.Create( "Ext32", "0xC9, {0}, 0", 4, 0 ),
		Tuple.Create( "Ext32", "0xC9, {0}, 1", 4, 1 ),
		Tuple.Create( "Ext32", "0xC9, {0}, 17", 4, 17 ),
		Tuple.Create( "Ext32", "0xC9, {0}, 0xFF", 4, 0xFF ),
		Tuple.Create( "Ext32", "0xC9, {0}, 1, 0", 4, 0x100 ),
		Tuple.Create( "Ext32", "0xC9, {0}, 0xFF, 0xFF", 4, 0xFFFF ),
		Tuple.Create( "Ext32", "0xC9, {0}, 1, 0, 0", 4, 0x10000 ),
	};

#>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2013 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

using System;
using System.IO;
using System.Linq;
#if !MSTEST
using NUnit.Framework;
#else
using TestFixtureAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestClassAttribute;
using TestAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestMethodAttribute;
using TimeoutAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TimeoutAttribute;
using Assert = NUnit.Framework.Assert;
using Is = NUnit.Framework.Is;
#endif

namespace MsgPack
{
	// This file was generated from UnpackerTest.Raw.tt and StreamingUnapkcerBase.ttinclude T4Template.
	// Do not modify this file. Edit UnpackerTest.Raw.tt and StreamingUnapkcerBase.ttinclude instead.

	[TestFixture]
	public partial class PackerTest_Ext
	{
<#
foreach ( var testCase in fixVariations )
{
	PutTest( testCase.Item1, testCase.Item2, null, testCase.Item3 );
	// FIXME: Invalid Type Code
}

foreach ( var testCase in variableVariations )
{
	PutTest( testCase.Item1, testCase.Item2, testCase.Item3, testCase.Item4 );
	// FIXME: Invalid Type Code
}

#>
	}
}
<#+
private void PutTest( string label, string headerFormat, int? lengthOfLength, int actualValueLength )
{
	var readDataMethodPrefix = "TestUnpack_Read_" + label + ( lengthOfLength == null ? String.Empty : "LengthIs" + lengthOfLength ) + "_AndBinaryLengthIs" + actualValueLength;
	PutTestMethod( readDataMethodPrefix + "JustLength_Success", headerFormat, lengthOfLength, actualValueLength, 0, PutTestUnpackDataBody );
	PutTestMethod( readDataMethodPrefix + "TooShort_Fail", headerFormat, lengthOfLength, actualValueLength, -1, PutTestUnpackDataBody );
	PutTestMethod( readDataMethodPrefix + "HasExtra_NoProblem",  headerFormat, lengthOfLength, actualValueLength, 1, PutTestUnpackDataBody );

	var readDirectMethodPrefix = "TestUnpack_ReadExtension_" + label + ( lengthOfLength == null ? String.Empty : "LengthIs" + lengthOfLength ) + "_AndBinaryLengthIs" + actualValueLength;
	PutTestMethod( readDirectMethodPrefix + "JustLength_Success",  headerFormat, lengthOfLength, actualValueLength, 0, PutTestUnpackDirectBody );
	PutTestMethod( readDirectMethodPrefix + "TooShort_Fail",  headerFormat, lengthOfLength, actualValueLength, -1, PutTestUnpackDirectBody );
	PutTestMethod( readDirectMethodPrefix + "HasExtra_NoProblem",  headerFormat, lengthOfLength, actualValueLength, 1, PutTestUnpackDirectBody );
}

private void PutTestUnpackDataBody( string typeCodeVariable, int actualValueLength, bool success )
{
#>
				// ver 0.3.2 should always fail with NIE.
				Assert.Throws<MessageTypeException>( ()=> unpacker.Read() );
<#+
	return;

	if ( success )
	{
#>
				Assert.IsTrue( unpacker.Read() );
				var result = unpacker.Data;
				Assert.IsTrue( result.HasValue );
				var actual = ( MessagePackExtendedTypeObject )result;
				Assert.That( actual.TypeCode, Is.EqualTo( <#= typeCodeVariable #> ) );
				Assert.That( actual.Data, Is.Not.Null );
				Assert.That( actual.Data.Length, Is.EqualTo( <#= actualValueLength #> ) );
<#+
	}
	else
	{
#>
				Assert.IsFalse( unpacker.Read() );
<#+
	}
}

private void PutTestUnpackDirectBody( string typeCodeVariable, int actualValueLength, bool success )
{
	// ver 0.3.2 does not have this API.
	return;

	// Note: Assuming following struct
	/*
		struct MessagePackExtendedTypeObject
		{
			public byte TypeCode;
			public byte[] Data;
		}
	 */
#>
				MessagePackExtendedTypeObject result;
<#+
	if ( success )
	{
#>
				Assert.IsTrue( unpacker.ReadExtendedTypeObject( out result ) );
				Assert.That( result.TypeCode, Is.EqualTo( <#= typeCodeVariable #> ) );
				Assert.That( result.Data, Is.Not.Null );
				Assert.That( result.Data.Length, Is.EqualTo( <#= actualValueLength #> ) );
<#+
	}
	else
	{
#>
				Assert.IsFalse( unpacker.ReadMessagePackExtendedTypeObject( out result ) );
<#+
	}
}

private void PutTestMethod( string methodName, string headerFormat, int? lengthOfLength, int actualValueLength, int valueLengthAjustument, Action<string, int, bool> putTestBody )
{
	var adjustedValueLength = actualValueLength + valueLengthAjustument;
	if ( adjustedValueLength < 0 )
	{
		// Never occurred situation.
		return;
	}

	var typeCode = "typeCode";
	var headerValue = String.Format( CultureInfo.InvariantCulture, headerFormat, typeCode );
#>

		[Test]
		public void <#= methodName #>()
		{
			var <#= typeCode #> = ( byte )( Environment.TickCount % 128 );
			using( var buffer =
				new MemoryStream( 
					new byte[] { <#= headerValue #> }
					.Concat( Enumerable.Repeat( ( byte )0xFF, <#= adjustedValueLength #> ) ).ToArray()
				)
			)
			using( var unpacker = Unpacker.Create( buffer ) )
			{
<#+
				putTestBody( typeCode, actualValueLength, valueLengthAjustument >= 0 );
#>
			}
		}
<#+
}
#>
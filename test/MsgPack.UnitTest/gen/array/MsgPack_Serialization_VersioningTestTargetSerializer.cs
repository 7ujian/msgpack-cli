//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.42000
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MsgPack.Serialization.GeneratedSerializers.ArrayBased {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MsgPack.Serialization.CodeDomSerializers.CodeDomSerializerBuilder", "0.6.0.0")]
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class MsgPack_Serialization_VersioningTestTargetSerializer : MsgPack.Serialization.MessagePackSerializer<MsgPack.Serialization.VersioningTestTarget> {
        
        private MsgPack.Serialization.MessagePackSerializer<int> _serializer0;
        
        private MsgPack.Serialization.MessagePackSerializer<string> _serializer1;
        
        private System.Collections.Generic.IList<System.Action<MsgPack.Packer, MsgPack.Serialization.VersioningTestTarget>> _packOperationList;
        
        private System.Collections.Generic.IList<string> _memberNames;
        
        private System.Collections.Generic.IList<System.Action<MsgPack.Unpacker, MsgPack.Serialization.VersioningTestTarget, int>> _unpackOperationList;
        
        private System.Collections.Generic.IDictionary<string, System.Action<MsgPack.Unpacker, MsgPack.Serialization.VersioningTestTarget, int>> _unpackOperationTable;
        
        public MsgPack_Serialization_VersioningTestTargetSerializer(MsgPack.Serialization.SerializationContext context) : 
                base(context) {
            MsgPack.Serialization.PolymorphismSchema schema0 = default(MsgPack.Serialization.PolymorphismSchema);
            schema0 = null;
            this._serializer0 = context.GetSerializer<int>(schema0);
            MsgPack.Serialization.PolymorphismSchema schema1 = default(MsgPack.Serialization.PolymorphismSchema);
            schema1 = null;
            this._serializer1 = context.GetSerializer<string>(schema1);
            System.Action<MsgPack.Packer, MsgPack.Serialization.VersioningTestTarget>[] packOperationList = default(System.Action<MsgPack.Packer, MsgPack.Serialization.VersioningTestTarget>[]);
            packOperationList = new System.Action<MsgPack.Packer, MsgPack.Serialization.VersioningTestTarget>[3];
            packOperationList[0] = new System.Action<MsgPack.Packer, MsgPack.Serialization.VersioningTestTarget>(this.PackValueOfField1);
            packOperationList[1] = new System.Action<MsgPack.Packer, MsgPack.Serialization.VersioningTestTarget>(this.PackValueOfField2);
            packOperationList[2] = new System.Action<MsgPack.Packer, MsgPack.Serialization.VersioningTestTarget>(this.PackValueOfField3);
            this._packOperationList = packOperationList;
            System.Action<MsgPack.Unpacker, MsgPack.Serialization.VersioningTestTarget, int>[] unpackOperationList = default(System.Action<MsgPack.Unpacker, MsgPack.Serialization.VersioningTestTarget, int>[]);
            unpackOperationList = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.VersioningTestTarget, int>[3];
            unpackOperationList[0] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.VersioningTestTarget, int>(this.UnpackValueOfField1);
            unpackOperationList[1] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.VersioningTestTarget, int>(this.UnpackValueOfField2);
            unpackOperationList[2] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.VersioningTestTarget, int>(this.UnpackValueOfField3);
            this._unpackOperationList = unpackOperationList;
            System.Collections.Generic.Dictionary<string, System.Action<MsgPack.Unpacker, MsgPack.Serialization.VersioningTestTarget, int>> unpackOperationTable = default(System.Collections.Generic.Dictionary<string, System.Action<MsgPack.Unpacker, MsgPack.Serialization.VersioningTestTarget, int>>);
            unpackOperationTable = new System.Collections.Generic.Dictionary<string, System.Action<MsgPack.Unpacker, MsgPack.Serialization.VersioningTestTarget, int>>(3);
            unpackOperationTable["Field1"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.VersioningTestTarget, int>(this.UnpackValueOfField1);
            unpackOperationTable["Field2"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.VersioningTestTarget, int>(this.UnpackValueOfField2);
            unpackOperationTable["Field3"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.VersioningTestTarget, int>(this.UnpackValueOfField3);
            this._unpackOperationTable = unpackOperationTable;
            this._memberNames = new string[] {
                    "Field1",
                    "Field2",
                    "Field3"};
        }
        
        private void PackValueOfField1(MsgPack.Packer packer, MsgPack.Serialization.VersioningTestTarget objectTree) {
            this._serializer0.PackTo(packer, objectTree.Field1);
        }
        
        private void PackValueOfField2(MsgPack.Packer packer, MsgPack.Serialization.VersioningTestTarget objectTree) {
            this._serializer0.PackTo(packer, objectTree.Field2);
        }
        
        private void PackValueOfField3(MsgPack.Packer packer, MsgPack.Serialization.VersioningTestTarget objectTree) {
            this._serializer1.PackTo(packer, objectTree.Field3);
        }
        
        protected internal override void PackToCore(MsgPack.Packer packer, MsgPack.Serialization.VersioningTestTarget objectTree) {
            MsgPack.Serialization.PackHelpers.PackToArray(packer, objectTree, this._packOperationList);
        }
        
        private void UnpackValueOfField1(MsgPack.Unpacker unpacker, MsgPack.Serialization.VersioningTestTarget unpackingContext, int indexOfItem) {
            System.Nullable<int> nullable = default(System.Nullable<int>);
            nullable = MsgPack.Serialization.UnpackHelpers.UnpackNullableInt32Value(unpacker, typeof(MsgPack.Serialization.VersioningTestTarget), "Field1");
            if (nullable.HasValue) {
                unpackingContext.Field1 = nullable.Value;
            }
        }
        
        private void UnpackValueOfField2(MsgPack.Unpacker unpacker, MsgPack.Serialization.VersioningTestTarget unpackingContext, int indexOfItem) {
            System.Nullable<int> nullable0 = default(System.Nullable<int>);
            nullable0 = MsgPack.Serialization.UnpackHelpers.UnpackNullableInt32Value(unpacker, typeof(MsgPack.Serialization.VersioningTestTarget), "Field2");
            if (nullable0.HasValue) {
                unpackingContext.Field2 = nullable0.Value;
            }
        }
        
        private void UnpackValueOfField3(MsgPack.Unpacker unpacker, MsgPack.Serialization.VersioningTestTarget unpackingContext, int indexOfItem) {
            string nullable1 = default(string);
            nullable1 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(MsgPack.Serialization.VersioningTestTarget), "Field3");
            if (((nullable1 == null) 
                        == false)) {
                unpackingContext.Field3 = nullable1;
            }
        }
        
        protected internal override MsgPack.Serialization.VersioningTestTarget UnpackFromCore(MsgPack.Unpacker unpacker) {
            MsgPack.Serialization.VersioningTestTarget result = default(MsgPack.Serialization.VersioningTestTarget);
            result = new MsgPack.Serialization.VersioningTestTarget();
            if (unpacker.IsArrayHeader) {
                return MsgPack.Serialization.UnpackHelpers.UnpackFromArray(unpacker, result, MsgPack.Serialization.UnpackHelpers.GetIdentity<MsgPack.Serialization.VersioningTestTarget>(), this._memberNames, this._unpackOperationList);
            }
            else {
                return MsgPack.Serialization.UnpackHelpers.UnpackFromMap(unpacker, result, MsgPack.Serialization.UnpackHelpers.GetIdentity<MsgPack.Serialization.VersioningTestTarget>(), this._unpackOperationTable);
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.42000
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MsgPack.Serialization.GeneratedSerializers.MapBased {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MsgPack.Serialization.CodeDomSerializers.CodeDomSerializerBuilder", "0.6.0.0")]
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class MsgPack_Serialization_PolymorphicMemberTypeMixedSerializer : MsgPack.Serialization.MessagePackSerializer<MsgPack.Serialization.PolymorphicMemberTypeMixed> {
        
        private MsgPack.Serialization.MessagePackSerializer<System.Collections.Generic.IDictionary<string, MsgPack.Serialization.FileSystemEntry>> _serializer0;
        
        private MsgPack.Serialization.MessagePackSerializer<System.Collections.Generic.IDictionary<string, MsgPack.Serialization.FileSystemEntry>> _serializer1;
        
        private MsgPack.Serialization.MessagePackSerializer<System.Collections.Generic.IDictionary<string, object>> _serializer2;
        
        private MsgPack.Serialization.MessagePackSerializer<System.Collections.Generic.IDictionary<string, string>> _serializer3;
        
        private MsgPack.Serialization.MessagePackSerializer<System.Collections.Generic.IList<MsgPack.Serialization.FileSystemEntry>> _serializer4;
        
        private MsgPack.Serialization.MessagePackSerializer<System.Collections.Generic.IList<MsgPack.Serialization.FileSystemEntry>> _serializer5;
        
        private MsgPack.Serialization.MessagePackSerializer<System.Collections.Generic.IList<object>> _serializer6;
        
        private MsgPack.Serialization.MessagePackSerializer<System.Collections.Generic.IList<string>> _serializer7;
        
        private MsgPack.Serialization.MessagePackSerializer<MsgPack.Serialization.FileSystemEntry> _serializer8;
        
        private MsgPack.Serialization.MessagePackSerializer<MsgPack.Serialization.FileSystemEntry> _serializer9;
        
        private MsgPack.Serialization.MessagePackSerializer<string> _serializer10;
        
        private MsgPack.Serialization.MessagePackSerializer<object> _serializer11;
        
        private MsgPack.Serialization.MessagePackSerializer<System.Tuple<string, MsgPack.Serialization.FileSystemEntry, MsgPack.Serialization.FileSystemEntry, object>> _serializer12;
        
        private System.Collections.Generic.IDictionary<string, System.Action<MsgPack.Packer, MsgPack.Serialization.PolymorphicMemberTypeMixed>> _packOperationTable;
        
        private System.Collections.Generic.IList<string> _memberNames;
        
        private System.Collections.Generic.IList<System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>> _unpackOperationList;
        
        private System.Collections.Generic.IDictionary<string, System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>> _unpackOperationTable;
        
        public MsgPack_Serialization_PolymorphicMemberTypeMixedSerializer(MsgPack.Serialization.SerializationContext context) : 
                base(context) {
            MsgPack.Serialization.PolymorphismSchema schema0 = default(MsgPack.Serialization.PolymorphismSchema);
            MsgPack.Serialization.PolymorphismSchema valuesSchema0 = default(MsgPack.Serialization.PolymorphismSchema);
            valuesSchema0 = MsgPack.Serialization.PolymorphismSchema.ForPolymorphicObject(typeof(MsgPack.Serialization.FileSystemEntry));
            System.Collections.Generic.Dictionary<string, System.Type> typeMap0 = default(System.Collections.Generic.Dictionary<string, System.Type>);
            typeMap0 = new System.Collections.Generic.Dictionary<string, System.Type>(2);
            typeMap0 = new System.Collections.Generic.Dictionary<string, System.Type>(2);
            typeMap0.Add("1", typeof(System.Collections.Generic.SortedDictionary<string, MsgPack.Serialization.FileSystemEntry>));
            typeMap0.Add("2", typeof(System.Collections.Generic.Dictionary<string, MsgPack.Serialization.FileSystemEntry>));
            schema0 = MsgPack.Serialization.PolymorphismSchema.ForPolymorphicDictionary(typeof(System.Collections.Generic.IDictionary<string, MsgPack.Serialization.FileSystemEntry>), typeMap0, null, valuesSchema0);
            this._serializer0 = context.GetSerializer<System.Collections.Generic.IDictionary<string, MsgPack.Serialization.FileSystemEntry>>(schema0);
            MsgPack.Serialization.PolymorphismSchema schema1 = default(MsgPack.Serialization.PolymorphismSchema);
            MsgPack.Serialization.PolymorphismSchema valuesSchema1 = default(MsgPack.Serialization.PolymorphismSchema);
            System.Collections.Generic.Dictionary<string, System.Type> valuesSchema1TypeMap0 = default(System.Collections.Generic.Dictionary<string, System.Type>);
            valuesSchema1TypeMap0 = new System.Collections.Generic.Dictionary<string, System.Type>(2);
            valuesSchema1TypeMap0.Add("2", typeof(MsgPack.Serialization.DirectoryEntry));
            valuesSchema1TypeMap0.Add("1", typeof(MsgPack.Serialization.FileEntry));
            valuesSchema1 = MsgPack.Serialization.PolymorphismSchema.ForPolymorphicObject(typeof(MsgPack.Serialization.FileSystemEntry), valuesSchema1TypeMap0);
            schema1 = MsgPack.Serialization.PolymorphismSchema.ForContextSpecifiedDictionary(typeof(System.Collections.Generic.IDictionary<string, MsgPack.Serialization.FileSystemEntry>), null, valuesSchema1);
            this._serializer1 = context.GetSerializer<System.Collections.Generic.IDictionary<string, MsgPack.Serialization.FileSystemEntry>>(schema1);
            MsgPack.Serialization.PolymorphismSchema schema2 = default(MsgPack.Serialization.PolymorphismSchema);
            MsgPack.Serialization.PolymorphismSchema valuesSchema2 = default(MsgPack.Serialization.PolymorphismSchema);
            valuesSchema2 = MsgPack.Serialization.PolymorphismSchema.ForPolymorphicObject(typeof(object));
            schema2 = MsgPack.Serialization.PolymorphismSchema.ForContextSpecifiedDictionary(typeof(System.Collections.Generic.IDictionary<string, object>), null, valuesSchema2);
            this._serializer2 = context.GetSerializer<System.Collections.Generic.IDictionary<string, object>>(schema2);
            MsgPack.Serialization.PolymorphismSchema schema3 = default(MsgPack.Serialization.PolymorphismSchema);
            schema3 = null;
            this._serializer3 = context.GetSerializer<System.Collections.Generic.IDictionary<string, string>>(schema3);
            MsgPack.Serialization.PolymorphismSchema schema4 = default(MsgPack.Serialization.PolymorphismSchema);
            MsgPack.Serialization.PolymorphismSchema itemsSchema0 = default(MsgPack.Serialization.PolymorphismSchema);
            System.Collections.Generic.Dictionary<string, System.Type> itemsSchemaTypeMap0 = default(System.Collections.Generic.Dictionary<string, System.Type>);
            itemsSchemaTypeMap0 = new System.Collections.Generic.Dictionary<string, System.Type>(2);
            itemsSchemaTypeMap0.Add("2", typeof(MsgPack.Serialization.DirectoryEntry));
            itemsSchemaTypeMap0.Add("1", typeof(MsgPack.Serialization.FileEntry));
            itemsSchema0 = MsgPack.Serialization.PolymorphismSchema.ForPolymorphicObject(typeof(MsgPack.Serialization.FileSystemEntry), itemsSchemaTypeMap0);
            schema4 = MsgPack.Serialization.PolymorphismSchema.ForContextSpecifiedCollection(typeof(System.Collections.Generic.IList<MsgPack.Serialization.FileSystemEntry>), itemsSchema0);
            this._serializer4 = context.GetSerializer<System.Collections.Generic.IList<MsgPack.Serialization.FileSystemEntry>>(schema4);
            MsgPack.Serialization.PolymorphismSchema schema5 = default(MsgPack.Serialization.PolymorphismSchema);
            MsgPack.Serialization.PolymorphismSchema itemsSchema1 = default(MsgPack.Serialization.PolymorphismSchema);
            itemsSchema1 = MsgPack.Serialization.PolymorphismSchema.ForPolymorphicObject(typeof(MsgPack.Serialization.FileSystemEntry));
            System.Collections.Generic.Dictionary<string, System.Type> typeMap1 = default(System.Collections.Generic.Dictionary<string, System.Type>);
            typeMap1 = new System.Collections.Generic.Dictionary<string, System.Type>(2);
            typeMap1 = new System.Collections.Generic.Dictionary<string, System.Type>(2);
            typeMap1.Add("1", typeof(System.Collections.ObjectModel.Collection<MsgPack.Serialization.FileSystemEntry>));
            typeMap1.Add("2", typeof(System.Collections.Generic.List<MsgPack.Serialization.FileSystemEntry>));
            schema5 = MsgPack.Serialization.PolymorphismSchema.ForPolymorphicCollection(typeof(System.Collections.Generic.IList<MsgPack.Serialization.FileSystemEntry>), typeMap1, itemsSchema1);
            this._serializer5 = context.GetSerializer<System.Collections.Generic.IList<MsgPack.Serialization.FileSystemEntry>>(schema5);
            MsgPack.Serialization.PolymorphismSchema schema6 = default(MsgPack.Serialization.PolymorphismSchema);
            MsgPack.Serialization.PolymorphismSchema itemsSchema2 = default(MsgPack.Serialization.PolymorphismSchema);
            itemsSchema2 = MsgPack.Serialization.PolymorphismSchema.ForPolymorphicObject(typeof(object));
            schema6 = MsgPack.Serialization.PolymorphismSchema.ForContextSpecifiedCollection(typeof(System.Collections.Generic.IList<object>), itemsSchema2);
            this._serializer6 = context.GetSerializer<System.Collections.Generic.IList<object>>(schema6);
            MsgPack.Serialization.PolymorphismSchema schema7 = default(MsgPack.Serialization.PolymorphismSchema);
            schema7 = null;
            this._serializer7 = context.GetSerializer<System.Collections.Generic.IList<string>>(schema7);
            MsgPack.Serialization.PolymorphismSchema schema8 = default(MsgPack.Serialization.PolymorphismSchema);
            System.Collections.Generic.Dictionary<string, System.Type> typeMap2 = default(System.Collections.Generic.Dictionary<string, System.Type>);
            typeMap2 = new System.Collections.Generic.Dictionary<string, System.Type>(2);
            typeMap2.Add("2", typeof(MsgPack.Serialization.DirectoryEntry));
            typeMap2.Add("1", typeof(MsgPack.Serialization.FileEntry));
            schema8 = MsgPack.Serialization.PolymorphismSchema.ForPolymorphicObject(typeof(MsgPack.Serialization.FileSystemEntry), typeMap2);
            this._serializer8 = context.GetSerializer<MsgPack.Serialization.FileSystemEntry>(schema8);
            MsgPack.Serialization.PolymorphismSchema schema9 = default(MsgPack.Serialization.PolymorphismSchema);
            schema9 = MsgPack.Serialization.PolymorphismSchema.ForPolymorphicObject(typeof(MsgPack.Serialization.FileSystemEntry));
            this._serializer9 = context.GetSerializer<MsgPack.Serialization.FileSystemEntry>(schema9);
            MsgPack.Serialization.PolymorphismSchema schema10 = default(MsgPack.Serialization.PolymorphismSchema);
            schema10 = null;
            this._serializer10 = context.GetSerializer<string>(schema10);
            MsgPack.Serialization.PolymorphismSchema schema11 = default(MsgPack.Serialization.PolymorphismSchema);
            schema11 = MsgPack.Serialization.PolymorphismSchema.ForPolymorphicObject(typeof(object));
            this._serializer11 = context.GetSerializer<object>(schema11);
            MsgPack.Serialization.PolymorphismSchema schema12 = default(MsgPack.Serialization.PolymorphismSchema);
            MsgPack.Serialization.PolymorphismSchema[] tupleItemsSchema0 = default(MsgPack.Serialization.PolymorphismSchema[]);
            tupleItemsSchema0 = new MsgPack.Serialization.PolymorphismSchema[4];
            MsgPack.Serialization.PolymorphismSchema tupleItemSchema0 = default(MsgPack.Serialization.PolymorphismSchema);
            tupleItemSchema0 = null;
            tupleItemsSchema0[0] = tupleItemSchema0;
            MsgPack.Serialization.PolymorphismSchema tupleItemSchema1 = default(MsgPack.Serialization.PolymorphismSchema);
            System.Collections.Generic.Dictionary<string, System.Type> tupleItemSchema1TypeMap0 = default(System.Collections.Generic.Dictionary<string, System.Type>);
            tupleItemSchema1TypeMap0 = new System.Collections.Generic.Dictionary<string, System.Type>(2);
            tupleItemSchema1TypeMap0.Add("1", typeof(MsgPack.Serialization.FileEntry));
            tupleItemSchema1TypeMap0.Add("2", typeof(MsgPack.Serialization.DirectoryEntry));
            tupleItemSchema1 = MsgPack.Serialization.PolymorphismSchema.ForPolymorphicObject(typeof(MsgPack.Serialization.FileSystemEntry), tupleItemSchema1TypeMap0);
            tupleItemsSchema0[1] = tupleItemSchema1;
            MsgPack.Serialization.PolymorphismSchema tupleItemSchema2 = default(MsgPack.Serialization.PolymorphismSchema);
            tupleItemSchema2 = MsgPack.Serialization.PolymorphismSchema.ForPolymorphicObject(typeof(MsgPack.Serialization.FileSystemEntry));
            tupleItemsSchema0[2] = tupleItemSchema2;
            MsgPack.Serialization.PolymorphismSchema tupleItemSchema3 = default(MsgPack.Serialization.PolymorphismSchema);
            tupleItemSchema3 = MsgPack.Serialization.PolymorphismSchema.ForPolymorphicObject(typeof(object));
            tupleItemsSchema0[3] = tupleItemSchema3;
            schema12 = MsgPack.Serialization.PolymorphismSchema.ForPolymorphicTuple(typeof(System.Tuple<string, MsgPack.Serialization.FileSystemEntry, MsgPack.Serialization.FileSystemEntry, object>), tupleItemsSchema0);
            this._serializer12 = context.GetSerializer<System.Tuple<string, MsgPack.Serialization.FileSystemEntry, MsgPack.Serialization.FileSystemEntry, object>>(schema12);
            System.Collections.Generic.Dictionary<string, System.Action<MsgPack.Packer, MsgPack.Serialization.PolymorphicMemberTypeMixed>> packOperationTable = default(System.Collections.Generic.Dictionary<string, System.Action<MsgPack.Packer, MsgPack.Serialization.PolymorphicMemberTypeMixed>>);
            packOperationTable = new System.Collections.Generic.Dictionary<string, System.Action<MsgPack.Packer, MsgPack.Serialization.PolymorphicMemberTypeMixed>>(14);
            packOperationTable["DictionaryKnownContainerRuntimeValue"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.PolymorphicMemberTypeMixed>(this.PackValueOfDictionaryKnownContainerRuntimeValue);
            packOperationTable["DictionaryKnownValue"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.PolymorphicMemberTypeMixed>(this.PackValueOfDictionaryKnownValue);
            packOperationTable["DictionaryObjectRuntimeValue"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.PolymorphicMemberTypeMixed>(this.PackValueOfDictionaryObjectRuntimeValue);
            packOperationTable["DictionaryVanilla"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.PolymorphicMemberTypeMixed>(this.PackValueOfDictionaryVanilla);
            packOperationTable["ListKnownItem"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.PolymorphicMemberTypeMixed>(this.PackValueOfListKnownItem);
            packOperationTable["ListKnwonContainerRuntimeItem"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.PolymorphicMemberTypeMixed>(this.PackValueOfListKnwonContainerRuntimeItem);
            packOperationTable["ListObjectRuntimeItem"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.PolymorphicMemberTypeMixed>(this.PackValueOfListObjectRuntimeItem);
            packOperationTable["ListVanilla"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.PolymorphicMemberTypeMixed>(this.PackValueOfListVanilla);
            packOperationTable["NormalKnown"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.PolymorphicMemberTypeMixed>(this.PackValueOfNormalKnown);
            packOperationTable["NormalRuntime"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.PolymorphicMemberTypeMixed>(this.PackValueOfNormalRuntime);
            packOperationTable["NormalVanilla"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.PolymorphicMemberTypeMixed>(this.PackValueOfNormalVanilla);
            packOperationTable["ObjectRuntime"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.PolymorphicMemberTypeMixed>(this.PackValueOfObjectRuntime);
            packOperationTable["ObjectRuntimeOmittedType"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.PolymorphicMemberTypeMixed>(this.PackValueOfObjectRuntimeOmittedType);
            packOperationTable["Tuple"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.PolymorphicMemberTypeMixed>(this.PackValueOfTuple);
            this._packOperationTable = packOperationTable;
            System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>[] unpackOperationList = default(System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>[]);
            unpackOperationList = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>[14];
            unpackOperationList[0] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfDictionaryKnownContainerRuntimeValue);
            unpackOperationList[1] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfDictionaryKnownValue);
            unpackOperationList[2] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfDictionaryObjectRuntimeValue);
            unpackOperationList[3] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfDictionaryVanilla);
            unpackOperationList[4] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfListKnownItem);
            unpackOperationList[5] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfListKnwonContainerRuntimeItem);
            unpackOperationList[6] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfListObjectRuntimeItem);
            unpackOperationList[7] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfListVanilla);
            unpackOperationList[8] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfNormalKnown);
            unpackOperationList[9] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfNormalRuntime);
            unpackOperationList[10] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfNormalVanilla);
            unpackOperationList[11] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfObjectRuntime);
            unpackOperationList[12] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfObjectRuntimeOmittedType);
            unpackOperationList[13] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfTuple);
            this._unpackOperationList = unpackOperationList;
            System.Collections.Generic.Dictionary<string, System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>> unpackOperationTable = default(System.Collections.Generic.Dictionary<string, System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>>);
            unpackOperationTable = new System.Collections.Generic.Dictionary<string, System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>>(14);
            unpackOperationTable["DictionaryKnownContainerRuntimeValue"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfDictionaryKnownContainerRuntimeValue);
            unpackOperationTable["DictionaryKnownValue"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfDictionaryKnownValue);
            unpackOperationTable["DictionaryObjectRuntimeValue"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfDictionaryObjectRuntimeValue);
            unpackOperationTable["DictionaryVanilla"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfDictionaryVanilla);
            unpackOperationTable["ListKnownItem"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfListKnownItem);
            unpackOperationTable["ListKnwonContainerRuntimeItem"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfListKnwonContainerRuntimeItem);
            unpackOperationTable["ListObjectRuntimeItem"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfListObjectRuntimeItem);
            unpackOperationTable["ListVanilla"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfListVanilla);
            unpackOperationTable["NormalKnown"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfNormalKnown);
            unpackOperationTable["NormalRuntime"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfNormalRuntime);
            unpackOperationTable["NormalVanilla"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfNormalVanilla);
            unpackOperationTable["ObjectRuntime"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfObjectRuntime);
            unpackOperationTable["ObjectRuntimeOmittedType"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfObjectRuntimeOmittedType);
            unpackOperationTable["Tuple"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed, int>(this.UnpackValueOfTuple);
            this._unpackOperationTable = unpackOperationTable;
            this._memberNames = new string[] {
                    "DictionaryKnownContainerRuntimeValue",
                    "DictionaryKnownValue",
                    "DictionaryObjectRuntimeValue",
                    "DictionaryVanilla",
                    "ListKnownItem",
                    "ListKnwonContainerRuntimeItem",
                    "ListObjectRuntimeItem",
                    "ListVanilla",
                    "NormalKnown",
                    "NormalRuntime",
                    "NormalVanilla",
                    "ObjectRuntime",
                    "ObjectRuntimeOmittedType",
                    "Tuple"};
        }
        
        private void PackValueOfDictionaryKnownContainerRuntimeValue(MsgPack.Packer packer, MsgPack.Serialization.PolymorphicMemberTypeMixed objectTree) {
            this._serializer0.PackTo(packer, objectTree.DictionaryKnownContainerRuntimeValue);
        }
        
        private void PackValueOfDictionaryKnownValue(MsgPack.Packer packer, MsgPack.Serialization.PolymorphicMemberTypeMixed objectTree) {
            this._serializer1.PackTo(packer, objectTree.DictionaryKnownValue);
        }
        
        private void PackValueOfDictionaryObjectRuntimeValue(MsgPack.Packer packer, MsgPack.Serialization.PolymorphicMemberTypeMixed objectTree) {
            this._serializer2.PackTo(packer, objectTree.DictionaryObjectRuntimeValue);
        }
        
        private void PackValueOfDictionaryVanilla(MsgPack.Packer packer, MsgPack.Serialization.PolymorphicMemberTypeMixed objectTree) {
            this._serializer3.PackTo(packer, objectTree.DictionaryVanilla);
        }
        
        private void PackValueOfListKnownItem(MsgPack.Packer packer, MsgPack.Serialization.PolymorphicMemberTypeMixed objectTree) {
            this._serializer4.PackTo(packer, objectTree.ListKnownItem);
        }
        
        private void PackValueOfListKnwonContainerRuntimeItem(MsgPack.Packer packer, MsgPack.Serialization.PolymorphicMemberTypeMixed objectTree) {
            this._serializer5.PackTo(packer, objectTree.ListKnwonContainerRuntimeItem);
        }
        
        private void PackValueOfListObjectRuntimeItem(MsgPack.Packer packer, MsgPack.Serialization.PolymorphicMemberTypeMixed objectTree) {
            this._serializer6.PackTo(packer, objectTree.ListObjectRuntimeItem);
        }
        
        private void PackValueOfListVanilla(MsgPack.Packer packer, MsgPack.Serialization.PolymorphicMemberTypeMixed objectTree) {
            this._serializer7.PackTo(packer, objectTree.ListVanilla);
        }
        
        private void PackValueOfNormalKnown(MsgPack.Packer packer, MsgPack.Serialization.PolymorphicMemberTypeMixed objectTree) {
            this._serializer8.PackTo(packer, objectTree.NormalKnown);
        }
        
        private void PackValueOfNormalRuntime(MsgPack.Packer packer, MsgPack.Serialization.PolymorphicMemberTypeMixed objectTree) {
            this._serializer9.PackTo(packer, objectTree.NormalRuntime);
        }
        
        private void PackValueOfNormalVanilla(MsgPack.Packer packer, MsgPack.Serialization.PolymorphicMemberTypeMixed objectTree) {
            this._serializer10.PackTo(packer, objectTree.NormalVanilla);
        }
        
        private void PackValueOfObjectRuntime(MsgPack.Packer packer, MsgPack.Serialization.PolymorphicMemberTypeMixed objectTree) {
            this._serializer11.PackTo(packer, objectTree.ObjectRuntime);
        }
        
        private void PackValueOfObjectRuntimeOmittedType(MsgPack.Packer packer, MsgPack.Serialization.PolymorphicMemberTypeMixed objectTree) {
            this._serializer11.PackTo(packer, objectTree.ObjectRuntimeOmittedType);
        }
        
        private void PackValueOfTuple(MsgPack.Packer packer, MsgPack.Serialization.PolymorphicMemberTypeMixed objectTree) {
            this._serializer12.PackTo(packer, objectTree.Tuple);
        }
        
        protected internal override void PackToCore(MsgPack.Packer packer, MsgPack.Serialization.PolymorphicMemberTypeMixed objectTree) {
            MsgPack.Serialization.PackHelpers.PackToMap(packer, objectTree, this._packOperationTable);
        }
        
        private void UnpackValueOfDictionaryKnownContainerRuntimeValue(MsgPack.Unpacker unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed unpackingContext, int indexOfItem) {
            System.Collections.Generic.IDictionary<string, MsgPack.Serialization.FileSystemEntry> nullable = default(System.Collections.Generic.IDictionary<string, MsgPack.Serialization.FileSystemEntry>);
            if ((unpacker.Read() == false)) {
                MsgPack.Serialization.SerializationExceptions.ThrowMissingItem(indexOfItem, "DictionaryKnownContainerRuntimeValue", unpacker);
            }
            if (((unpacker.IsArrayHeader == false) 
                        && (unpacker.IsMapHeader == false))) {
                nullable = this._serializer0.UnpackFrom(unpacker);
            }
            else {
                MsgPack.Unpacker disposable = default(MsgPack.Unpacker);
                disposable = unpacker.ReadSubtree();
                try {
                    nullable = this._serializer0.UnpackFrom(disposable);
                }
                finally {
                    if (((disposable == null) 
                                == false)) {
                        disposable.Dispose();
                    }
                }
            }
            if (((nullable == null) 
                        == false)) {
                unpackingContext.DictionaryKnownContainerRuntimeValue = nullable;
            }
        }
        
        private void UnpackValueOfDictionaryKnownValue(MsgPack.Unpacker unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed unpackingContext, int indexOfItem) {
            System.Collections.Generic.IDictionary<string, MsgPack.Serialization.FileSystemEntry> nullable0 = default(System.Collections.Generic.IDictionary<string, MsgPack.Serialization.FileSystemEntry>);
            if ((unpacker.Read() == false)) {
                MsgPack.Serialization.SerializationExceptions.ThrowMissingItem(indexOfItem, "DictionaryKnownValue", unpacker);
            }
            if (((unpacker.IsArrayHeader == false) 
                        && (unpacker.IsMapHeader == false))) {
                nullable0 = this._serializer1.UnpackFrom(unpacker);
            }
            else {
                MsgPack.Unpacker disposable0 = default(MsgPack.Unpacker);
                disposable0 = unpacker.ReadSubtree();
                try {
                    nullable0 = this._serializer1.UnpackFrom(disposable0);
                }
                finally {
                    if (((disposable0 == null) 
                                == false)) {
                        disposable0.Dispose();
                    }
                }
            }
            if (((nullable0 == null) 
                        == false)) {
                unpackingContext.DictionaryKnownValue = nullable0;
            }
        }
        
        private void UnpackValueOfDictionaryObjectRuntimeValue(MsgPack.Unpacker unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed unpackingContext, int indexOfItem) {
            System.Collections.Generic.IDictionary<string, object> nullable1 = default(System.Collections.Generic.IDictionary<string, object>);
            if ((unpacker.Read() == false)) {
                MsgPack.Serialization.SerializationExceptions.ThrowMissingItem(indexOfItem, "DictionaryObjectRuntimeValue", unpacker);
            }
            if (((unpacker.IsArrayHeader == false) 
                        && (unpacker.IsMapHeader == false))) {
                nullable1 = this._serializer2.UnpackFrom(unpacker);
            }
            else {
                MsgPack.Unpacker disposable1 = default(MsgPack.Unpacker);
                disposable1 = unpacker.ReadSubtree();
                try {
                    nullable1 = this._serializer2.UnpackFrom(disposable1);
                }
                finally {
                    if (((disposable1 == null) 
                                == false)) {
                        disposable1.Dispose();
                    }
                }
            }
            if (((nullable1 == null) 
                        == false)) {
                unpackingContext.DictionaryObjectRuntimeValue = nullable1;
            }
        }
        
        private void UnpackValueOfDictionaryVanilla(MsgPack.Unpacker unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed unpackingContext, int indexOfItem) {
            System.Collections.Generic.IDictionary<string, string> nullable2 = default(System.Collections.Generic.IDictionary<string, string>);
            if ((unpacker.Read() == false)) {
                MsgPack.Serialization.SerializationExceptions.ThrowMissingItem(indexOfItem, "DictionaryVanilla", unpacker);
            }
            if (((unpacker.IsArrayHeader == false) 
                        && (unpacker.IsMapHeader == false))) {
                nullable2 = this._serializer3.UnpackFrom(unpacker);
            }
            else {
                MsgPack.Unpacker disposable2 = default(MsgPack.Unpacker);
                disposable2 = unpacker.ReadSubtree();
                try {
                    nullable2 = this._serializer3.UnpackFrom(disposable2);
                }
                finally {
                    if (((disposable2 == null) 
                                == false)) {
                        disposable2.Dispose();
                    }
                }
            }
            if (((nullable2 == null) 
                        == false)) {
                unpackingContext.DictionaryVanilla = nullable2;
            }
        }
        
        private void UnpackValueOfListKnownItem(MsgPack.Unpacker unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed unpackingContext, int indexOfItem) {
            System.Collections.Generic.IList<MsgPack.Serialization.FileSystemEntry> nullable3 = default(System.Collections.Generic.IList<MsgPack.Serialization.FileSystemEntry>);
            if ((unpacker.Read() == false)) {
                MsgPack.Serialization.SerializationExceptions.ThrowMissingItem(indexOfItem, "ListKnownItem", unpacker);
            }
            if (((unpacker.IsArrayHeader == false) 
                        && (unpacker.IsMapHeader == false))) {
                nullable3 = this._serializer4.UnpackFrom(unpacker);
            }
            else {
                MsgPack.Unpacker disposable3 = default(MsgPack.Unpacker);
                disposable3 = unpacker.ReadSubtree();
                try {
                    nullable3 = this._serializer4.UnpackFrom(disposable3);
                }
                finally {
                    if (((disposable3 == null) 
                                == false)) {
                        disposable3.Dispose();
                    }
                }
            }
            if (((nullable3 == null) 
                        == false)) {
                unpackingContext.ListKnownItem = nullable3;
            }
        }
        
        private void UnpackValueOfListKnwonContainerRuntimeItem(MsgPack.Unpacker unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed unpackingContext, int indexOfItem) {
            System.Collections.Generic.IList<MsgPack.Serialization.FileSystemEntry> nullable4 = default(System.Collections.Generic.IList<MsgPack.Serialization.FileSystemEntry>);
            if ((unpacker.Read() == false)) {
                MsgPack.Serialization.SerializationExceptions.ThrowMissingItem(indexOfItem, "ListKnwonContainerRuntimeItem", unpacker);
            }
            if (((unpacker.IsArrayHeader == false) 
                        && (unpacker.IsMapHeader == false))) {
                nullable4 = this._serializer5.UnpackFrom(unpacker);
            }
            else {
                MsgPack.Unpacker disposable4 = default(MsgPack.Unpacker);
                disposable4 = unpacker.ReadSubtree();
                try {
                    nullable4 = this._serializer5.UnpackFrom(disposable4);
                }
                finally {
                    if (((disposable4 == null) 
                                == false)) {
                        disposable4.Dispose();
                    }
                }
            }
            if (((nullable4 == null) 
                        == false)) {
                unpackingContext.ListKnwonContainerRuntimeItem = nullable4;
            }
        }
        
        private void UnpackValueOfListObjectRuntimeItem(MsgPack.Unpacker unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed unpackingContext, int indexOfItem) {
            System.Collections.Generic.IList<object> nullable5 = default(System.Collections.Generic.IList<object>);
            if ((unpacker.Read() == false)) {
                MsgPack.Serialization.SerializationExceptions.ThrowMissingItem(indexOfItem, "ListObjectRuntimeItem", unpacker);
            }
            if (((unpacker.IsArrayHeader == false) 
                        && (unpacker.IsMapHeader == false))) {
                nullable5 = this._serializer6.UnpackFrom(unpacker);
            }
            else {
                MsgPack.Unpacker disposable5 = default(MsgPack.Unpacker);
                disposable5 = unpacker.ReadSubtree();
                try {
                    nullable5 = this._serializer6.UnpackFrom(disposable5);
                }
                finally {
                    if (((disposable5 == null) 
                                == false)) {
                        disposable5.Dispose();
                    }
                }
            }
            if (((nullable5 == null) 
                        == false)) {
                unpackingContext.ListObjectRuntimeItem = nullable5;
            }
        }
        
        private void UnpackValueOfListVanilla(MsgPack.Unpacker unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed unpackingContext, int indexOfItem) {
            System.Collections.Generic.IList<string> nullable6 = default(System.Collections.Generic.IList<string>);
            if ((unpacker.Read() == false)) {
                MsgPack.Serialization.SerializationExceptions.ThrowMissingItem(indexOfItem, "ListVanilla", unpacker);
            }
            if (((unpacker.IsArrayHeader == false) 
                        && (unpacker.IsMapHeader == false))) {
                nullable6 = this._serializer7.UnpackFrom(unpacker);
            }
            else {
                MsgPack.Unpacker disposable6 = default(MsgPack.Unpacker);
                disposable6 = unpacker.ReadSubtree();
                try {
                    nullable6 = this._serializer7.UnpackFrom(disposable6);
                }
                finally {
                    if (((disposable6 == null) 
                                == false)) {
                        disposable6.Dispose();
                    }
                }
            }
            if (((nullable6 == null) 
                        == false)) {
                unpackingContext.ListVanilla = nullable6;
            }
        }
        
        private void UnpackValueOfNormalKnown(MsgPack.Unpacker unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed unpackingContext, int indexOfItem) {
            MsgPack.Serialization.FileSystemEntry nullable7 = default(MsgPack.Serialization.FileSystemEntry);
            if ((unpacker.Read() == false)) {
                MsgPack.Serialization.SerializationExceptions.ThrowMissingItem(indexOfItem, "NormalKnown", unpacker);
            }
            if (((unpacker.IsArrayHeader == false) 
                        && (unpacker.IsMapHeader == false))) {
                nullable7 = this._serializer8.UnpackFrom(unpacker);
            }
            else {
                MsgPack.Unpacker disposable7 = default(MsgPack.Unpacker);
                disposable7 = unpacker.ReadSubtree();
                try {
                    nullable7 = this._serializer8.UnpackFrom(disposable7);
                }
                finally {
                    if (((disposable7 == null) 
                                == false)) {
                        disposable7.Dispose();
                    }
                }
            }
            if (((nullable7 == null) 
                        == false)) {
                unpackingContext.NormalKnown = nullable7;
            }
        }
        
        private void UnpackValueOfNormalRuntime(MsgPack.Unpacker unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed unpackingContext, int indexOfItem) {
            MsgPack.Serialization.FileSystemEntry nullable8 = default(MsgPack.Serialization.FileSystemEntry);
            if ((unpacker.Read() == false)) {
                MsgPack.Serialization.SerializationExceptions.ThrowMissingItem(indexOfItem, "NormalRuntime", unpacker);
            }
            if (((unpacker.IsArrayHeader == false) 
                        && (unpacker.IsMapHeader == false))) {
                nullable8 = this._serializer9.UnpackFrom(unpacker);
            }
            else {
                MsgPack.Unpacker disposable8 = default(MsgPack.Unpacker);
                disposable8 = unpacker.ReadSubtree();
                try {
                    nullable8 = this._serializer9.UnpackFrom(disposable8);
                }
                finally {
                    if (((disposable8 == null) 
                                == false)) {
                        disposable8.Dispose();
                    }
                }
            }
            if (((nullable8 == null) 
                        == false)) {
                unpackingContext.NormalRuntime = nullable8;
            }
        }
        
        private void UnpackValueOfNormalVanilla(MsgPack.Unpacker unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed unpackingContext, int indexOfItem) {
            string nullable9 = default(string);
            nullable9 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(MsgPack.Serialization.PolymorphicMemberTypeMixed), "NormalVanilla");
            if (((nullable9 == null) 
                        == false)) {
                unpackingContext.NormalVanilla = nullable9;
            }
        }
        
        private void UnpackValueOfObjectRuntime(MsgPack.Unpacker unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed unpackingContext, int indexOfItem) {
            object nullable10 = default(object);
            if ((unpacker.Read() == false)) {
                MsgPack.Serialization.SerializationExceptions.ThrowMissingItem(indexOfItem, "ObjectRuntime", unpacker);
            }
            if (((unpacker.IsArrayHeader == false) 
                        && (unpacker.IsMapHeader == false))) {
                nullable10 = this._serializer11.UnpackFrom(unpacker);
            }
            else {
                MsgPack.Unpacker disposable9 = default(MsgPack.Unpacker);
                disposable9 = unpacker.ReadSubtree();
                try {
                    nullable10 = this._serializer11.UnpackFrom(disposable9);
                }
                finally {
                    if (((disposable9 == null) 
                                == false)) {
                        disposable9.Dispose();
                    }
                }
            }
            if (((nullable10 == null) 
                        == false)) {
                unpackingContext.ObjectRuntime = nullable10;
            }
        }
        
        private void UnpackValueOfObjectRuntimeOmittedType(MsgPack.Unpacker unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed unpackingContext, int indexOfItem) {
            object nullable11 = default(object);
            if ((unpacker.Read() == false)) {
                MsgPack.Serialization.SerializationExceptions.ThrowMissingItem(indexOfItem, "ObjectRuntimeOmittedType", unpacker);
            }
            if (((unpacker.IsArrayHeader == false) 
                        && (unpacker.IsMapHeader == false))) {
                nullable11 = this._serializer11.UnpackFrom(unpacker);
            }
            else {
                MsgPack.Unpacker disposable10 = default(MsgPack.Unpacker);
                disposable10 = unpacker.ReadSubtree();
                try {
                    nullable11 = this._serializer11.UnpackFrom(disposable10);
                }
                finally {
                    if (((disposable10 == null) 
                                == false)) {
                        disposable10.Dispose();
                    }
                }
            }
            if (((nullable11 == null) 
                        == false)) {
                unpackingContext.ObjectRuntimeOmittedType = nullable11;
            }
        }
        
        private void UnpackValueOfTuple(MsgPack.Unpacker unpacker, MsgPack.Serialization.PolymorphicMemberTypeMixed unpackingContext, int indexOfItem) {
            System.Tuple<string, MsgPack.Serialization.FileSystemEntry, MsgPack.Serialization.FileSystemEntry, object> nullable12 = default(System.Tuple<string, MsgPack.Serialization.FileSystemEntry, MsgPack.Serialization.FileSystemEntry, object>);
            if ((unpacker.Read() == false)) {
                MsgPack.Serialization.SerializationExceptions.ThrowMissingItem(indexOfItem, "Tuple", unpacker);
            }
            if (((unpacker.IsArrayHeader == false) 
                        && (unpacker.IsMapHeader == false))) {
                nullable12 = this._serializer12.UnpackFrom(unpacker);
            }
            else {
                MsgPack.Unpacker disposable11 = default(MsgPack.Unpacker);
                disposable11 = unpacker.ReadSubtree();
                try {
                    nullable12 = this._serializer12.UnpackFrom(disposable11);
                }
                finally {
                    if (((disposable11 == null) 
                                == false)) {
                        disposable11.Dispose();
                    }
                }
            }
            if (((nullable12 == null) 
                        == false)) {
                unpackingContext.Tuple = nullable12;
            }
        }
        
        protected internal override MsgPack.Serialization.PolymorphicMemberTypeMixed UnpackFromCore(MsgPack.Unpacker unpacker) {
            MsgPack.Serialization.PolymorphicMemberTypeMixed result = default(MsgPack.Serialization.PolymorphicMemberTypeMixed);
            result = new MsgPack.Serialization.PolymorphicMemberTypeMixed();
            if (unpacker.IsArrayHeader) {
                return MsgPack.Serialization.UnpackHelpers.UnpackFromArray(unpacker, result, MsgPack.Serialization.UnpackHelpers.GetIdentity<MsgPack.Serialization.PolymorphicMemberTypeMixed>(), this._memberNames, this._unpackOperationList);
            }
            else {
                return MsgPack.Serialization.UnpackHelpers.UnpackFromMap(unpacker, result, MsgPack.Serialization.UnpackHelpers.GetIdentity<MsgPack.Serialization.PolymorphicMemberTypeMixed>(), this._unpackOperationTable);
            }
        }
    }
}

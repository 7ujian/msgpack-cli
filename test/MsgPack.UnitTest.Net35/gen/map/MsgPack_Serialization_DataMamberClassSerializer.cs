//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.8670
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MsgPack.Serialization.GeneratedSerializers.MapBased {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MsgPack.Serialization.CodeDomSerializers.CodeDomSerializerBuilder", "0.6.0.0")]
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class MsgPack_Serialization_DataMamberClassSerializer : MsgPack.Serialization.MessagePackSerializer<MsgPack.Serialization.DataMamberClass> {
        
        private MsgPack.Serialization.MessagePackSerializer<int> _serializer0;
        
        private System.Reflection.MethodBase _methodBaseDataMamberClass_get_NonPublicProperty0;
        
        private System.Reflection.FieldInfo _fieldDataMamberClass_NonPublicField0;
        
        private System.Reflection.FieldInfo _fieldDataMamberClass_NonSerializedNonPublicField1;
        
        private MsgPack.Serialization.MessagePackSerializer<System.Collections.Generic.List<int>> _serializer1;
        
        private System.Collections.Generic.IDictionary<string, System.Action<MsgPack.Packer, MsgPack.Serialization.DataMamberClass>> _packOperationTable;
        
        private System.Reflection.MethodBase _methodBaseDataMamberClass_set_NonPublicProperty1;
        
        private System.Collections.Generic.IList<string> _memberNames;
        
        private System.Collections.Generic.IList<System.Action<MsgPack.Unpacker, MsgPack.Serialization.DataMamberClass, int>> _unpackOperationList;
        
        private System.Collections.Generic.IDictionary<string, System.Action<MsgPack.Unpacker, MsgPack.Serialization.DataMamberClass, int>> _unpackOperationTable;
        
        public MsgPack_Serialization_DataMamberClassSerializer(MsgPack.Serialization.SerializationContext context) : 
                base(context) {
            MsgPack.Serialization.PolymorphismSchema schema0 = default(MsgPack.Serialization.PolymorphismSchema);
            schema0 = null;
            this._serializer0 = context.GetSerializer<int>(schema0);
            MsgPack.Serialization.PolymorphismSchema schema1 = default(MsgPack.Serialization.PolymorphismSchema);
            schema1 = null;
            this._serializer1 = context.GetSerializer<System.Collections.Generic.List<int>>(schema1);
            this._fieldDataMamberClass_NonPublicField0 = typeof(MsgPack.Serialization.DataMamberClass).GetField("NonPublicField", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            this._fieldDataMamberClass_NonSerializedNonPublicField1 = typeof(MsgPack.Serialization.DataMamberClass).GetField("NonSerializedNonPublicField", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            this._methodBaseDataMamberClass_get_NonPublicProperty0 = typeof(MsgPack.Serialization.DataMamberClass).GetMethod("get_NonPublicProperty", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)), null, new System.Type[0], null);
            this._methodBaseDataMamberClass_set_NonPublicProperty1 = typeof(MsgPack.Serialization.DataMamberClass).GetMethod("set_NonPublicProperty", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)), null, new System.Type[] {
                        typeof(int)}, null);
            System.Collections.Generic.Dictionary<string, System.Action<MsgPack.Packer, MsgPack.Serialization.DataMamberClass>> packOperationTable = default(System.Collections.Generic.Dictionary<string, System.Action<MsgPack.Packer, MsgPack.Serialization.DataMamberClass>>);
            packOperationTable = new System.Collections.Generic.Dictionary<string, System.Action<MsgPack.Packer, MsgPack.Serialization.DataMamberClass>>(7);
            packOperationTable["Alias"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.DataMamberClass>(this.PackValueOfAlias);
            packOperationTable["PublicField"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.DataMamberClass>(this.PackValueOfPublicField);
            packOperationTable["NonPublicProperty"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.DataMamberClass>(this.PackValueOfNonPublicProperty);
            packOperationTable["NonPublicField"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.DataMamberClass>(this.PackValueOfNonPublicField);
            packOperationTable["NonSerializedPublicField"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.DataMamberClass>(this.PackValueOfNonSerializedPublicField);
            packOperationTable["NonSerializedNonPublicField"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.DataMamberClass>(this.PackValueOfNonSerializedNonPublicField);
            packOperationTable["CollectionReadOnlyProperty"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.DataMamberClass>(this.PackValueOfCollectionReadOnlyProperty);
            this._packOperationTable = packOperationTable;
            System.Action<MsgPack.Unpacker, MsgPack.Serialization.DataMamberClass, int>[] unpackOperationList = default(System.Action<MsgPack.Unpacker, MsgPack.Serialization.DataMamberClass, int>[]);
            unpackOperationList = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.DataMamberClass, int>[10];
            unpackOperationList[0] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.DataMamberClass, int>(this.UnpackValueOfAlias);
            unpackOperationList[1] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.DataMamberClass, int>(this.UnpackValueOfPublicField);
            unpackOperationList[2] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.DataMamberClass, int>(this.UnpackMemberPlaceHolder);
            unpackOperationList[3] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.DataMamberClass, int>(this.UnpackMemberPlaceHolder);
            unpackOperationList[4] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.DataMamberClass, int>(this.UnpackValueOfNonPublicProperty);
            unpackOperationList[5] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.DataMamberClass, int>(this.UnpackValueOfNonPublicField);
            unpackOperationList[6] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.DataMamberClass, int>(this.UnpackValueOfNonSerializedPublicField);
            unpackOperationList[7] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.DataMamberClass, int>(this.UnpackMemberPlaceHolder);
            unpackOperationList[8] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.DataMamberClass, int>(this.UnpackValueOfNonSerializedNonPublicField);
            unpackOperationList[9] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.DataMamberClass, int>(this.UnpackValueOfCollectionReadOnlyProperty);
            this._unpackOperationList = unpackOperationList;
            System.Collections.Generic.Dictionary<string, System.Action<MsgPack.Unpacker, MsgPack.Serialization.DataMamberClass, int>> unpackOperationTable = default(System.Collections.Generic.Dictionary<string, System.Action<MsgPack.Unpacker, MsgPack.Serialization.DataMamberClass, int>>);
            unpackOperationTable = new System.Collections.Generic.Dictionary<string, System.Action<MsgPack.Unpacker, MsgPack.Serialization.DataMamberClass, int>>(7);
            unpackOperationTable["Alias"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.DataMamberClass, int>(this.UnpackValueOfAlias);
            unpackOperationTable["PublicField"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.DataMamberClass, int>(this.UnpackValueOfPublicField);
            unpackOperationTable["NonPublicProperty"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.DataMamberClass, int>(this.UnpackValueOfNonPublicProperty);
            unpackOperationTable["NonPublicField"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.DataMamberClass, int>(this.UnpackValueOfNonPublicField);
            unpackOperationTable["NonSerializedPublicField"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.DataMamberClass, int>(this.UnpackValueOfNonSerializedPublicField);
            unpackOperationTable["NonSerializedNonPublicField"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.DataMamberClass, int>(this.UnpackValueOfNonSerializedNonPublicField);
            unpackOperationTable["CollectionReadOnlyProperty"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.DataMamberClass, int>(this.UnpackValueOfCollectionReadOnlyProperty);
            this._unpackOperationTable = unpackOperationTable;
            this._memberNames = new string[] {
                    "Alias",
                    "PublicField",
                    null,
                    null,
                    "NonPublicProperty",
                    "NonPublicField",
                    "NonSerializedPublicField",
                    null,
                    "NonSerializedNonPublicField",
                    "CollectionReadOnlyProperty"};
        }
        
        private void PackValueOfAlias(MsgPack.Packer packer, MsgPack.Serialization.DataMamberClass objectTree) {
            this._serializer0.PackTo(packer, objectTree.PublicProperty);
        }
        
        private void PackValueOfPublicField(MsgPack.Packer packer, MsgPack.Serialization.DataMamberClass objectTree) {
            this._serializer0.PackTo(packer, objectTree.PublicField);
        }
        
        private void PackValueOfNonPublicProperty(MsgPack.Packer packer, MsgPack.Serialization.DataMamberClass objectTree) {
            this._serializer0.PackTo(packer, ((int)(this._methodBaseDataMamberClass_get_NonPublicProperty0.Invoke(objectTree, null))));
        }
        
        private void PackValueOfNonPublicField(MsgPack.Packer packer, MsgPack.Serialization.DataMamberClass objectTree) {
            this._serializer0.PackTo(packer, ((int)(this._fieldDataMamberClass_NonPublicField0.GetValue(objectTree))));
        }
        
        private void PackValueOfNonSerializedPublicField(MsgPack.Packer packer, MsgPack.Serialization.DataMamberClass objectTree) {
            this._serializer0.PackTo(packer, objectTree.NonSerializedPublicField);
        }
        
        private void PackValueOfNonSerializedNonPublicField(MsgPack.Packer packer, MsgPack.Serialization.DataMamberClass objectTree) {
            this._serializer0.PackTo(packer, ((int)(this._fieldDataMamberClass_NonSerializedNonPublicField1.GetValue(objectTree))));
        }
        
        private void PackValueOfCollectionReadOnlyProperty(MsgPack.Packer packer, MsgPack.Serialization.DataMamberClass objectTree) {
            this._serializer1.PackTo(packer, objectTree.CollectionReadOnlyProperty);
        }
        
        protected internal override void PackToCore(MsgPack.Packer packer, MsgPack.Serialization.DataMamberClass objectTree) {
            MsgPack.Serialization.PackHelpers.PackToMap(packer, objectTree, this._packOperationTable);
        }
        
        private void UnpackValueOfAlias(MsgPack.Unpacker unpacker, MsgPack.Serialization.DataMamberClass unpackingContext, int indexOfItem) {
            System.Nullable<int> nullable = default(System.Nullable<int>);
            nullable = MsgPack.Serialization.UnpackHelpers.UnpackNullableInt32Value(unpacker, typeof(MsgPack.Serialization.DataMamberClass), "PublicProperty");
            if (nullable.HasValue) {
                unpackingContext.PublicProperty = nullable.Value;
            }
        }
        
        private void UnpackValueOfPublicField(MsgPack.Unpacker unpacker, MsgPack.Serialization.DataMamberClass unpackingContext, int indexOfItem) {
            System.Nullable<int> nullable0 = default(System.Nullable<int>);
            nullable0 = MsgPack.Serialization.UnpackHelpers.UnpackNullableInt32Value(unpacker, typeof(MsgPack.Serialization.DataMamberClass), "PublicField");
            if (nullable0.HasValue) {
                unpackingContext.PublicField = nullable0.Value;
            }
        }
        
        private void UnpackMemberPlaceHolder(MsgPack.Unpacker unpacker, MsgPack.Serialization.DataMamberClass unpackingContext, int indexOfItem) {
            unpacker.Read();
        }
        
        private void UnpackValueOfNonPublicProperty(MsgPack.Unpacker unpacker, MsgPack.Serialization.DataMamberClass unpackingContext, int indexOfItem) {
            System.Nullable<int> nullable1 = default(System.Nullable<int>);
            nullable1 = MsgPack.Serialization.UnpackHelpers.UnpackNullableInt32Value(unpacker, typeof(MsgPack.Serialization.DataMamberClass), "NonPublicProperty");
            if (nullable1.HasValue) {
                this._methodBaseDataMamberClass_set_NonPublicProperty1.Invoke(unpackingContext, new object[] {
                            ((object)(nullable1.Value))});
            }
        }
        
        private void UnpackValueOfNonPublicField(MsgPack.Unpacker unpacker, MsgPack.Serialization.DataMamberClass unpackingContext, int indexOfItem) {
            System.Nullable<int> nullable2 = default(System.Nullable<int>);
            nullable2 = MsgPack.Serialization.UnpackHelpers.UnpackNullableInt32Value(unpacker, typeof(MsgPack.Serialization.DataMamberClass), "NonPublicField");
            if (nullable2.HasValue) {
                this._fieldDataMamberClass_NonPublicField0.SetValue(unpackingContext, ((object)(nullable2.Value)));
            }
        }
        
        private void UnpackValueOfNonSerializedPublicField(MsgPack.Unpacker unpacker, MsgPack.Serialization.DataMamberClass unpackingContext, int indexOfItem) {
            System.Nullable<int> nullable3 = default(System.Nullable<int>);
            nullable3 = MsgPack.Serialization.UnpackHelpers.UnpackNullableInt32Value(unpacker, typeof(MsgPack.Serialization.DataMamberClass), "NonSerializedPublicField");
            if (nullable3.HasValue) {
                unpackingContext.NonSerializedPublicField = nullable3.Value;
            }
        }
        
        private void UnpackValueOfNonSerializedNonPublicField(MsgPack.Unpacker unpacker, MsgPack.Serialization.DataMamberClass unpackingContext, int indexOfItem) {
            System.Nullable<int> nullable4 = default(System.Nullable<int>);
            nullable4 = MsgPack.Serialization.UnpackHelpers.UnpackNullableInt32Value(unpacker, typeof(MsgPack.Serialization.DataMamberClass), "NonSerializedNonPublicField");
            if (nullable4.HasValue) {
                this._fieldDataMamberClass_NonSerializedNonPublicField1.SetValue(unpackingContext, ((object)(nullable4.Value)));
            }
        }
        
        private void UnpackValueOfCollectionReadOnlyProperty(MsgPack.Unpacker unpacker, MsgPack.Serialization.DataMamberClass unpackingContext, int indexOfItem) {
            System.Collections.Generic.List<int> nullable5 = default(System.Collections.Generic.List<int>);
            if ((unpacker.Read() == false)) {
                MsgPack.Serialization.SerializationExceptions.ThrowMissingItem(indexOfItem, "CollectionReadOnlyProperty", unpacker);
            }
            if (((unpacker.IsArrayHeader == false) 
                        && (unpacker.IsMapHeader == false))) {
                nullable5 = this._serializer1.UnpackFrom(unpacker);
            }
            else {
                MsgPack.Unpacker disposable = default(MsgPack.Unpacker);
                disposable = unpacker.ReadSubtree();
                try {
                    nullable5 = this._serializer1.UnpackFrom(disposable);
                }
                finally {
                    if (((disposable == null) 
                                == false)) {
                        disposable.Dispose();
                    }
                }
            }
            if (((nullable5 == null) 
                        == false)) {
                System.Collections.Generic.List<int>.Enumerator enumerator = nullable5.GetEnumerator();
                int current;
                try {
                    for (
                    ; enumerator.MoveNext(); 
                    ) {
                        current = enumerator.Current;
                        unpackingContext.CollectionReadOnlyProperty.Add(current);
                    }
                }
                finally {
                    enumerator.Dispose();
                }
            }
        }
        
        protected internal override MsgPack.Serialization.DataMamberClass UnpackFromCore(MsgPack.Unpacker unpacker) {
            MsgPack.Serialization.DataMamberClass result = default(MsgPack.Serialization.DataMamberClass);
            result = new MsgPack.Serialization.DataMamberClass();
            if (unpacker.IsArrayHeader) {
                return MsgPack.Serialization.UnpackHelpers.UnpackFromArray(unpacker, result, MsgPack.Serialization.UnpackHelpers.GetIdentity<MsgPack.Serialization.DataMamberClass>(), this._memberNames, this._unpackOperationList);
            }
            else {
                return MsgPack.Serialization.UnpackHelpers.UnpackFromMap(unpacker, result, MsgPack.Serialization.UnpackHelpers.GetIdentity<MsgPack.Serialization.DataMamberClass>(), this._unpackOperationTable);
            }
        }
    }
}

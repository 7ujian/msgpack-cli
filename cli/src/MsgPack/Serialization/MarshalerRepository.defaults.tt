<#
//
// MessagePack for CLI
//
// Copyright (C) 2010 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly Name="System" #>
<#@ assembly Name="System.Core" #>
<#@ assembly Name="System.Numerics" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Numerics" #>
<#@ import namespace="System.Reflection" #>
<#
var __typeName = "MarshalerRepository";
// Copied from DsefaultTemplates.tt
var __excludes =
	new HashSet<Type>()
	{
		// Special(manual) handlings on builtin marshaler:
		// typeof( System.Guid ),
		// typeof( System.Runtime.InteropServices.ComTypes.FILETIME ),
		// Special(manual) handlings on builtin serializer:
		typeof( System.ArraySegment<> ),
		typeof( System.Collections.DictionaryEntry ),
		typeof( System.Collections.Generic.KeyValuePair<,> ),
		typeof( System.Numerics.Complex ),
		// Special handling on serializer:
		typeof( System.Nullable<> ),
		// Not supported:
		typeof( void ),
		typeof( System.IntPtr ),
		typeof( System.UIntPtr ),
		typeof( System.ModuleHandle ),
		typeof( System.RuntimeTypeHandle ),
		typeof( System.RuntimeFieldHandle ),
		typeof( System.RuntimeMethodHandle ),
		typeof( System.RuntimeArgumentHandle ),
		typeof( System.ArgIterator ),
		typeof( System.ConsoleKeyInfo ),
		typeof( System.TypedReference ),
		typeof( System.ComponentModel.Design.Serialization.MemberRelationship ),
		typeof( System.Diagnostics.CounterSample ),
		typeof( System.Diagnostics.Eventing.EventDescriptor ),
		typeof( System.Diagnostics.SymbolStore.SymbolToken ),
		typeof( System.IO.WaitForChangedResult ),
		typeof( System.Net.Sockets.IPPacketInformation ),
		typeof( System.Net.Sockets.SocketInformation ),
		typeof( System.Reflection.CustomAttributeNamedArgument ),
		typeof( System.Reflection.CustomAttributeTypedArgument ),
		typeof( System.Reflection.InterfaceMapping ),
		typeof( System.Reflection.ParameterModifier ),
		typeof( System.Reflection.Emit.EventToken ),
		typeof( System.Reflection.Emit.FieldToken ),
		typeof( System.Reflection.Emit.Label ),
		typeof( System.Reflection.Emit.MethodToken ),
		typeof( System.Reflection.Emit.OpCode ),
		typeof( System.Reflection.Emit.ParameterToken ),
		typeof( System.Reflection.Emit.PropertyToken ),
		typeof( System.Reflection.Emit.SignatureToken ),
		typeof( System.Reflection.Emit.StringToken ),
		typeof( System.Reflection.Emit.TypeToken ),
		typeof( System.Runtime.InteropServices.ArrayWithOffset ),
		typeof( System.Runtime.InteropServices.GCHandle ),
		typeof( System.Runtime.InteropServices.HandleRef ),
		typeof( System.Runtime.InteropServices.ComTypes.BIND_OPTS ),
		typeof( System.Runtime.InteropServices.ComTypes.BINDPTR ),
		typeof( System.Runtime.InteropServices.ComTypes.CONNECTDATA ),
		typeof( System.Runtime.InteropServices.ComTypes.DISPPARAMS ),
		typeof( System.Runtime.InteropServices.ComTypes.ELEMDESC ),
		typeof( System.Runtime.InteropServices.ComTypes.EXCEPINFO ),
		typeof( System.Runtime.InteropServices.ComTypes.FORMATETC ),
		typeof( System.Runtime.InteropServices.ComTypes.FUNCDESC ),
		typeof( System.Runtime.InteropServices.ComTypes.IDLDESC ),
		typeof( System.Runtime.InteropServices.ComTypes.PARAMDESC ),
		typeof( System.Runtime.InteropServices.ComTypes.STATDATA ),
		typeof( System.Runtime.InteropServices.ComTypes.STATSTG ),
		typeof( System.Runtime.InteropServices.ComTypes.STGMEDIUM ),
		typeof( System.Runtime.InteropServices.ComTypes.TYPEATTR ),
		typeof( System.Runtime.InteropServices.ComTypes.TYPEDESC ),
		typeof( System.Runtime.InteropServices.ComTypes.TYPELIBATTR ),
		typeof( System.Runtime.InteropServices.ComTypes.VARDESC ),
		typeof( System.Runtime.Serialization.SerializationEntry ),
		typeof( System.Runtime.Serialization.StreamingContext ),
		typeof( System.Security.Cryptography.CngProperty ),
		typeof( System.Security.Cryptography.DSAParameters ),
		typeof( System.Security.Cryptography.RSAParameters ),
		typeof( System.Security.Cryptography.CngProperty ),
		typeof( System.Security.Cryptography.X509Certificates.X509ChainStatus ),
		typeof( System.Threading.AsyncFlowControl ),
		typeof( System.Threading.CancellationToken ),
		typeof( System.Threading.CancellationTokenRegistration ),
		typeof( System.Threading.LockCookie ),
		typeof( System.Threading.NativeOverlapped ),
		typeof( System.Threading.SpinLock ),
		typeof( System.Threading.SpinWait ),
		typeof( System.Threading.Tasks.ParallelLoopResult ),
	};
var __types = 
	typeof( object ).Assembly.GetTypes()
	.Where( type => type.IsValueType && type.IsPublic && !Attribute.IsDefined( type, typeof( ObsoleteAttribute ) ) )
	.Concat(
		typeof( TraceListener ).Assembly.GetTypes().Where( type => type.IsValueType && type.IsPublic && !Attribute.IsDefined( type, typeof( ObsoleteAttribute ) ) )
	).Concat(
		typeof( Enumerable ).Assembly.GetTypes().Where( type => type.IsValueType && type.IsPublic && !Attribute.IsDefined( type, typeof( ObsoleteAttribute ) ) )
	).Concat(
		typeof( BigInteger ).Assembly.GetTypes().Where( type => type.IsValueType && type.IsPublic && !Attribute.IsDefined( type, typeof( ObsoleteAttribute ) ) )
	).Except( __excludes )
	.ToArray();
#>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Reflection;

namespace MsgPack.Serialization
{
	// This file generated from <#= __typeName #>.tt T4Template.
	// Do not modify this file. Edit <#= __typeName #>.tt instead.

	partial class <#= __typeName #> 
	{
		private static Dictionary<RuntimeTypeHandle, object> InitializeDefaultTable()
		{
			var dictionary = new Dictionary<RuntimeTypeHandle, object>( <#= __types.Length #> );
<#
foreach( Type __type in __types )
{
	switch( Type.GetTypeCode( __type ) )
	{
		case TypeCode.Char:
		case TypeCode.DateTime:
		case TypeCode.DBNull:
		case TypeCode.Decimal:
		case TypeCode.Empty:
		case TypeCode.Object:
		{
			break;
		}
		default:
		{
			continue;
		}
	}
#>
			dictionary.Add( typeof( <#= __type.FullName #> ).TypeHandle, new MsgPack.Serialization.DefaultMarshalers.<#= __type.FullName.Replace( Type.Delimiter, '_' ).Replace( '`', '_' ) #>MessageMarshaler() );
<#
}
#>
			return dictionary;
		}
	}
}
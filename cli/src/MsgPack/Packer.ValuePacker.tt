<#
//
// MessagePack for CLI
//
// Copyright (C) 2010 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#
string __typeName = "Packer";
var __scalarTypes = 
	new []
	{
		typeof( bool ),
		typeof( sbyte ),
		typeof( short ),
		typeof( int ),
		typeof( long ),
		typeof( byte ),
		typeof( ushort ),
		typeof( uint ),
		typeof( ulong ),
		typeof( float ),
		typeof( double )
	};
#>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;

namespace MsgPack
{
	partial class <#= __typeName #>
	{

		/// <summary>
		///		Pack specified <see cref="Object"/> as apporipriate value.
		/// </summary>
		/// <param name="boxedValue">Boxed value.</param>
		/// <param name="options">Options.</param>
		/// <returns>This instance.</returns>
		/// <exception cref="MessageTypeException">There is no approptiate MessagePack type to represent specified object.</exception>
		public Packer PackObject( object boxedValue, PackingOptions options )
		{
			if( boxedValue == null )
			{
				return this.PackNull();
			}
			
			var asPackable = boxedValue as IPackable;
			if( asPackable != null )
			{
				asPackable.PackToMessage( this, options );
				return this;
			}		
<#
foreach( var __scalarType in __scalarTypes )
{
#>
			if( boxedValue is <#= __scalarType #> )
			{
<#
	if( __scalarType == typeof( bool ) )
	{
#>
				return this.Pack( ( <#= __scalarType #> )boxedValue );
<#				
	}
	else
	{
#>
				return
					( options == null || !options.IsStrict )
					? this.Pack( ( <#= __scalarType #> )boxedValue )
					: this.PackStrict( ( <#= __scalarType #> )boxedValue );
<#
	}
#>
			}
			
			if( boxedValue is <#= __scalarType #>? )
			{
<#
	if( __scalarType == typeof( bool ) )
	{
#>
				return this.Pack( ( <#= __scalarType #> )boxedValue );
<#				
	}
	else
	{
#>				return 
					( options == null || !options.IsStrict )
					? this.Pack( ( <#= __scalarType #>? )boxedValue )
					: this.PackStrict( ( <#= __scalarType #>? )boxedValue );
<#
	}
#>
			}
<#
}
#>
			
			var asByteArray = boxedValue as byte[];
			if( asByteArray != null )
			{
				return this.PackRaw( asByteArray );
			}
						
			var asString = boxedValue as string;
			if( asString != null )
			{
				return this.PackString( asString, options == null ? MessagePackConvert.Utf8NonBom : options.StringEncoding );
			}
			
			var collectionType = ExtractCollectionType( boxedValue.GetType() );
			if( collectionType != null )
			{
				ValuePacker.GetInstance( collectionType ).PackObject( this, boxedValue, options );
				return this;
			}
			
			throw new MessageTypeException( String.Format( CultureInfo.CurrentCulture, "Unknown object '{0}'.", boxedValue.GetType() ) );
		}
		
		private abstract class ValuePacker
		{
			private static readonly Dictionary<Type, ValuePacker> _cache = new Dictionary<Type, ValuePacker>();
			
			public static ValuePacker GetInstance( Type targetType )
			{
				ValuePacker result;
				if( !_cache.TryGetValue( targetType, out result ) )
				{
					var packerType = typeof( ValuePacker<> ).MakeGenericType( targetType );
					result = ( ValuePacker )packerType.GetField( "Instance" ).GetValue( null );
					_cache[ targetType ] = result;
				}
				
				return result;
			}
			
			protected ValuePacker() { }
			
			public abstract void PackObject( Packer packer, object value, PackingOptions options );			
		}
		
		private abstract class ValuePacker<T> : ValuePacker
		{
			public static readonly ValuePacker<T> Instance = CreateInstance();
			
			private static ValuePacker<T> CreateInstance()
			{
				if( typeof( T ) == typeof( MessagePackObject ) )
				{
					return Activator.CreateInstance( typeof( MessagePackObjectValuePacker ) ) as ValuePacker<T>;
				}
				else if( typeof( IPackable ).IsAssignableFrom( typeof( T ) ) )
				{
					return Activator.CreateInstance( typeof( PackableValuePacker<> ).MakeGenericType( typeof( T ) ) ) as ValuePacker<T>;
				}
				else if( typeof( T ) == typeof( byte[] ) )
				{
					return Activator.CreateInstance( typeof( ByteArrayValuePacker ) ) as ValuePacker<T>;
				}
				else if( typeof( T ) == typeof( string ) )
				{
					return Activator.CreateInstance( typeof( StringValuePacker ) ) as ValuePacker<T>;
				}
<#
foreach( var __scalarType in __scalarTypes )
{
#>
				else if ( typeof( T ) == typeof( <#= __scalarType.FullName #> ) )
				{
					return Activator.CreateInstance( typeof( <#= __scalarType.Name #>ValuePacker ) ) as ValuePacker<T>;
				}
				else if ( typeof( T ) == typeof( <#= __scalarType.FullName #>? ) )
				{
					return Activator.CreateInstance( typeof( Nullable<#= __scalarType.Name #>ValuePacker ) ) as ValuePacker<T>;
				}
<#
}
#>

				var collectionType = ExtractCollectionType( typeof( T ) );
				if( collectionType != null )
				{
					if( collectionType.IsGenericType )
					{
						var genericTypeDefinition = collectionType.GetGenericTypeDefinition();
						if( genericTypeDefinition == typeof( IList<> ) )
						{
							return 
								Activator.CreateInstance( 
									typeof( CollectionValuePacker<> ).MakeGenericType( typeof( T ) ),
									Activator.CreateInstance( typeof( ArrayValuePacker<> ).MakeGenericType( collectionType.GetGenericArguments() ) )
								)as ValuePacker<T>;
						}
						else if( genericTypeDefinition == typeof( IDictionary<,> ) )
						{
							return 
								Activator.CreateInstance( 
									typeof( CollectionValuePacker<> ).MakeGenericType( typeof( T ) ),
									Activator.CreateInstance( typeof( DictionaryValuePacker<,> ).MakeGenericType( collectionType.GetGenericArguments() ) ) 
								) as ValuePacker<T>;
						}
					}
					else
					{
						if( collectionType == typeof( IList ) )
						{
							return
								Activator.CreateInstance( 
									typeof( CollectionValuePacker<> ).MakeGenericType( typeof( T ) ),
									Activator.CreateInstance( typeof( ArrayValuePacker ) )
								) as ValuePacker<T>;
						}
						else if( collectionType == typeof( IDictionary ) )
						{
							return 
								Activator.CreateInstance( 
									typeof( CollectionValuePacker<> ).MakeGenericType( typeof( T ) ),
									Activator.CreateInstance( typeof( DictionaryValuePacker ) )
								) as ValuePacker<T>;
						}
					}
				}
				
				return new FallbackValuePacker<T>();
			}
			
			protected ValuePacker() { }
			
			public sealed override void PackObject( Packer packer, object value, PackingOptions options )
			{
				this.Pack( packer, ( T )value, options );
			}
			
			public abstract void Pack( Packer packer, T value, PackingOptions options );
		}
		
		private sealed class CollectionValuePacker<T> : ValuePacker<T>
			where T : class, IEnumerable
		{
			private readonly ValuePacker _realPacker;
			
			public CollectionValuePacker( ValuePacker realPacker )
			{
				this._realPacker = realPacker;
			}
			
			public sealed override void Pack( Packer packer, T value, PackingOptions options )
			{
				if( value == null )
				{
					packer.PackNull();
					return;
				}
				
				this._realPacker.PackObject( packer, value, options );
			}
		}
		
<#
foreach( var __scalarType in __scalarTypes )
{
#>

		private sealed class <#= __scalarType.Name #>ValuePacker : ValuePacker< <#= __scalarType.FullName #> >
		{
			public <#= __scalarType.Name #>ValuePacker() { }
			
			public sealed override void Pack( Packer packer, <#= __scalarType.FullName #> value, PackingOptions options )
			{
				packer.Pack( value );
			}
		}
		
		private sealed class Nullable<#= __scalarType.Name #>ValuePacker : ValuePacker< <#= __scalarType.FullName #>? >
		{
			public Nullable<#= __scalarType.Name #>ValuePacker() { }
			
			public sealed override void Pack( Packer packer, <#= __scalarType.FullName #>? value, PackingOptions options )
			{
				packer.Pack( value );
			}
		}
<#
}
#>
		private sealed class MessagePackObjectValuePacker : ValuePacker<MessagePackObject>
		{
			public MessagePackObjectValuePacker() { }
			
			public sealed override void Pack( Packer packer, MessagePackObject value, PackingOptions options )
			{
				value.PackToMessage( packer, options );
			}
		}

		private sealed class PackableValuePacker<TPackable> : ValuePacker<TPackable>
			where TPackable : IPackable
		{
			public PackableValuePacker() { }
			
			public sealed override void Pack( Packer packer, TPackable value, PackingOptions options )
			{
				if( value == null )
				{
					packer.PackNull();
					return;
				}
				
				value.PackToMessage( packer, options );
			}
		}

		private sealed class ByteArrayValuePacker : ValuePacker<byte[]>
		{
			public ByteArrayValuePacker() { }
			
			public sealed override void Pack( Packer packer, byte[] value, PackingOptions options )
			{
				if( value == null )
				{
					packer.PackNull();
					return;
				}
				
				packer.PackRaw( value );
			}
		}

		private sealed class StringValuePacker : ValuePacker<string>
		{
			public StringValuePacker() { }
			
			public sealed override void Pack( Packer packer, string value, PackingOptions options )
			{
				if( value == null )
				{
					packer.PackNull();
					return;
				}
				
				packer.PackString( value, options == null ? MessagePackConvert.Utf8NonBom : options.StringEncoding  );
			}
		}
		
		private sealed class ArrayValuePacker : ValuePacker<IList>
		{
			public ArrayValuePacker() { }
			
			public sealed override void Pack( Packer packer, IList value, PackingOptions options )
			{
				if( value == null )
				{
					packer.PackNull();
					return;
				}
				
				packer.PackArrayHeader( value.Count );
				foreach( var item in value )
				{
					packer.PackObject( item, options );
				}
			}
		}
				
		private sealed class ArrayValuePacker<TItem> : ValuePacker<IList<TItem>>
		{
			public ArrayValuePacker() { }
			
			public sealed override void Pack( Packer packer, IList<TItem> value, PackingOptions options )
			{
				if( value == null )
				{
					packer.PackNull();
					return;
				}
				
				packer.PackArrayHeader( value.Count );
				foreach( var item in value )
				{
					ValuePacker<TItem>.Instance.Pack( packer, item, options );
				}
			}
		}
		
		private sealed class DictionaryValuePacker : ValuePacker<IDictionary>
		{
			public DictionaryValuePacker() { }
			
			public sealed override void Pack( Packer packer, IDictionary value, PackingOptions options )
			{
				if( value == null )
				{
					packer.PackNull();
					return;
				}
				
				packer.PackMapHeader( value.Count );
				foreach( DictionaryEntry item in value )
				{
					packer.PackObject( item.Key, options );
					packer.PackObject( item.Value, options );
				}
			}
		}

		private sealed class DictionaryValuePacker<TKey,TValue> : ValuePacker<IDictionary<TKey,TValue>>
		{
			public DictionaryValuePacker() { }
			
			public sealed override void Pack( Packer packer, IDictionary<TKey,TValue> value, PackingOptions options )
			{
				if( value == null )
				{
					packer.PackNull();
					return;
				}
				
				packer.PackMapHeader( value.Count );
				foreach( var item in value )
				{
					ValuePacker<TKey>.Instance.Pack( packer, item.Key, options );
					ValuePacker<TValue>.Instance.Pack( packer, item.Value, options );
				}
			}
		}

		private sealed class FallbackValuePacker<T> : ValuePacker<T>
		{
			public FallbackValuePacker() { }
			
			public sealed override void Pack( Packer packer, T value, PackingOptions options )
			{
				if( value == null )
				{
					packer.PackNull();
					return;
				}
				
				throw new NotSupportedException( String.Format( CultureInfo.CurrentCulture, "Cannot pack '{0}'({1} type).", value, value.GetType() ) );
			}
		}
	}
}
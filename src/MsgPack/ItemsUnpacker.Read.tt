<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ include file="..\Core.ttinclude" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Runtime.InteropServices" #>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2016 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

#if UNITY_5 || UNITY_STANDALONE || UNITY_WEBPLAYER || UNITY_WII || UNITY_IPHONE || UNITY_ANDROID || UNITY_PS3 || UNITY_XBOX360 || UNITY_FLASH || UNITY_BKACKBERRY || UNITY_WINRT
#define UNITY
#endif

using System;
using System.Collections.Generic;

namespace MsgPack
{
	// This file was generated from ItemsUnpacker.Read.tt and StreamingUnapkcerBase.ttinclude T4Template.
	// Do not modify this file. Edit ItemsUnpacker.Read.tt and StreamingUnapkcerBase.ttinclude instead.

	partial class ItemsUnpacker
	{
<#
this.PushIndent( 2 );

foreach( var type in
	new []
	{ 
		typeof( bool ), 
		typeof( byte ), typeof( sbyte ),
		typeof( short ), typeof( ushort ),
		typeof( int ), typeof( uint ),
		typeof( long ), typeof( ulong ),
		typeof( float ), typeof( double ),
	}
)
{
	this.WriteReadBody( type.Name, type.Name, false,	() => this.WriteReadScalar( type ) );
	this.WriteReadBody( type.Name, type.Name, true,		() => this.WriteReadScalar( type ) );

	this.WriteReadBody( "Nullable" + type.Name, type.Name + "?", false,	() => this.WriteReadScalar( typeof( Nullable<> ).MakeGenericType( type ) ) );
	this.WriteReadBody( "Nullable" + type.Name, type.Name + "?", true,	() => this.WriteReadScalar( typeof( Nullable<> ).MakeGenericType( type ) ) );
}

this.WriteReadBody( "Binary", "Byte[]", false,	() => this.WriteReadRaw( "Byte[]", "Binary" ) );
this.WriteReadBody( "Binary", "Byte[]", true,	() => this.WriteReadRaw( "Byte[]", "Binary" ) );
this.WriteReadBody( "String", "String", false,	() => this.WriteReadRaw( "String", "String" ) );
this.WriteReadBody( "String", "String", true,	() => this.WriteReadRaw( "String", "String" ) );

this.WriteReadBody( "Object", "MessagePackObject", false,	() => this.WriteReadObject() );
this.WriteReadBody( "Object", "MessagePackObject", true,	() => this.WriteReadObject() );
this.WriteReadBody( "ArrayLength", "Int64", false,	() => this.WriteReadLength( "ArrayLength" ) );
this.WriteReadBody( "ArrayLength", "Int64", true,	() => this.WriteReadLength( "ArrayLength" ) );
this.WriteReadBody( "MapLength", "Int64", false,	() => this.WriteReadLength( "MapLength" ) );
this.WriteReadBody( "MapLength", "Int64", true,		() => this.WriteReadLength( "MapLength" ) );

this.WriteReadBody( "MessagePackExtendedTypeObject", "MessagePackExtendedTypeObject", false,	() => this.WriteReadExt() );
this.WriteReadBody( "MessagePackExtendedTypeObject", "MessagePackExtendedTypeObject", true,		() => this.WriteReadExt() );
this.PopIndent();
#>
	}
}

<#+

private static readonly Type[] ScalarTypes =
			new []
			{
				typeof( sbyte ), typeof( short ), typeof( int ), typeof( long ),
				typeof( byte ), typeof( ushort ), typeof( uint ), typeof( ulong ),
				typeof( float ), typeof( double )
			};

private static readonly string[] ExtCodes = new [] { "FixExt1", "FixExt2", "FixExt4", "FixExt8", "FixExt16", "Ext8", "Ext16", "Ext32" };

private class TypeCodeMapping
{
	public string Code { get; set; }
	public Type CodeType { get; set; }
	public int Size { get; set; }
}

private static readonly TypeCodeMapping[] TypeCodeMappings =
		new [] 
		{
			"SByte", "Int16", "Int32", "Int64",
			"Byte", "UInt16", "UInt32", "UInt64",
			"Single", "Double"
		}.Zip( ScalarTypes,
			( code, codeType ) => new TypeCodeMapping{ Code = code, CodeType = codeType, Size = Marshal.SizeOf( codeType ) }
		).ToArray();

private void WriteReadBody( string typeName, string fullTypeName, bool isForSubtree, Action bodyWriter )
{
	var firstParameter = ( isForSubtree && typeName == "Object" ) ? "bool isDeep, " : String.Empty;
	var firstArgument = ( !isForSubtree && typeName == "Object" ) ? "/* isDeep */true, " : String.Empty;
#>
<#= isForSubtree ? "internal" : "public override" #> bool Read<#= isForSubtree ? "Subtree" : String.Empty #><#= typeName #>( <#= firstParameter #>out <#= fullTypeName #> result )
{
<#+
	if( !isForSubtree )
	{
		this.PopIndent();
#>
#if !UNITY
			this.EnsureNotInSubtreeMode();
#endif // !UNITY

<#+
		this.PushIndent( 2 );

#>
	return this.ReadSubtree<#= typeName #>( <#= firstArgument #>out result );
<#+
	}
	else
	{
		this.PushIndent( 1 );
		bodyWriter();
		this.PopIndent();
	}
#>
}

<#+
} // WriteReadBody

private void WriteReadBodyCore( string typeName, Nullability nullability, Action<string, DecodedVariable, string> bodyWriter )
{
	var actualTypeName = typeName;
	if( nullability == Nullability.Nullable  )
	{
		actualTypeName += "?";
	}

#>
byte header;
long integral;
float real32;
double real64;
var type = this.ReadValue( out header, out integral, out real32, out real64 );

switch( type )
{
	case ReadValueResult.Eof:
	{
<#+
	this.PushIndent( 2 );
	this.Fail( "result", actualTypeName );
	this.PopIndent();
#>
	}
<#+
	if( nullability != Nullability.Value )
	{
#>
	case ReadValueResult.Nil:
	{
<#+
		this.PushIndent( 2 );
		this.OnReturnScalar();
		this.Success( null, "result", "default( " + actualTypeName + " )" );
		this.PopIndent();
#>
	}
<#+
	} // if( isNullable )

	this.PushIndent( 1 );
	bodyWriter( "type", new DecodedVariable( "integral", "real32", "real64" ), "result" );
	this.PopIndent();
#>
	default:
	{
		this.ThrowTypeException( typeof( <#= actualTypeName #> ), header );
		// Never reach
<#+
		this.PushIndent( 2 );
		this.Fail( "result", actualTypeName );
		this.PopIndent();
#>
	}
}
<#+
} // WriteReadBodyCore( Type type, bool isNullable, Action<string, DecodedVariable, string> bodyWriter )

private void WriteReadScalar( Type type )
{
	var nullableUnderlying  = Nullable.GetUnderlyingType( type );
	WriteReadBodyCore( ( nullableUnderlying ?? type ).Name, nullableUnderlying != null ? Nullability.Nullable : Nullability.Value, ( t, valueVar, resultVar ) => WriteReadScalarCore( nullableUnderlying ?? type, nullableUnderlying != null, valueVar, resultVar ) );
}

private void WriteReadScalarCore( Type type, bool isNullable, DecodedVariable valueVariable, string resultVariable )
{
	var nullableType =
		( isNullable && type.IsValueType ) ? type.Name + "?" : null;

	if( type == typeof( bool ) )
	{
#>
case ReadValueResult.Boolean:
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar();
		this.Success( nullableType, resultVariable, valueVariable.Integral() + " != 0" );
		this.PopIndent();
#>
}
<#+
		return; // bool is done.
	} // if( type == typeof( bool ) )

	var thisEntry = TypeCodeMappings.SingleOrDefault( e => e.CodeType == type );
	if( thisEntry != null )
	{
		// For same type
#>
case ReadValueResult.<#= thisEntry.Code #>:
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar();
		this.Success( nullableType, resultVariable, CastIfNecessary( GetSourceType( type ), type, false, valueVariable.Get( type ), false ) );
		this.PopIndent();
#>
}
<#+
	} // if

	foreach( var entry in TypeCodeMappings.Where( e => CanConvertTo( type, e.Size ) && e.CodeType != type ) )
	{
		if ( entry.CodeType == typeof( ulong ) || entry.CodeType == typeof( float ) || entry.CodeType == typeof( double ) )
		{
			// UInt64 and Reals should be treated as spetially.
			continue;
		}
#>
case ReadValueResult.<#= entry.Code #>:
<#+
	} // foreach
#>
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar();
		this.Success( nullableType, resultVariable, CastIfNecessary( typeof( long ), type, true, valueVariable.Integral(), false ) );
		this.PopIndent();
#>
}
<#+

	if( type != typeof( ulong ) )
	{
#>
case ReadValueResult.UInt64:
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar();
		this.Success( nullableType, resultVariable, CastIfNecessary( typeof( ulong ), type, true, valueVariable.Integral(), true ) );
		this.PopIndent();
#>
}
<#+
	}

	if( type != typeof( float ) )
	{
#>
case ReadValueResult.Single:
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar();
		this.PopIndent();
#>
	<#= resultVariable #> = <#= CastIfNecessary( typeof( float ), type, true, valueVariable.Real32(), false ) #>;
	return true;
}
<#+
	}

	if( type != typeof( double ) )
	{
#>
case ReadValueResult.Double:
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar();
		this.PopIndent();
#>
	<#= resultVariable #> = <#= CastIfNecessary( typeof( double ), type, true, valueVariable.Real64(), false ) #>;
	return true;
}
<#+
	}
} // WriteReadScalarCore( Type type, bool isNullable, DecodedVariable valueVariable, string resultVariable )

private void WriteReadLength( string code )
{
	WriteReadBodyCore( "Int64", Nullability.Value, ( t, valueVar, resultVar ) => this.WriteReadLengthCore( code, valueVar, resultVar ) );
} // WriteReadLength( string code )

private void WriteReadLengthCore( string code, DecodedVariable valueVariable, string resultVariable )
{
#>
case ReadValueResult.<#= code #>:
{
<#+
	this.PushIndent( 1 );
	this.SuccessWithLengthCheck( code, resultVariable, "this.Read" + code + "Core( " + valueVariable.Integral() + ")" );
	this.PopIndent();
#>
}
<#+
} // WriteReadLengthCore( string code, string headerVariable, DecodedVariable valueVariable, string resultVariable )


private void WriteReadRaw( string typeName, string code )
{
	WriteReadBodyCore( typeName, Nullability.Reference, ( t, valueVar, resultVar ) => this.WriteReadRawCore( code, valueVar, resultVar ) );
} // WriteReadRaw( string typeName, string code )

private void WriteReadRawCore( string code, DecodedVariable valueVariable, string resultVariable )
{
#>
case ReadValueResult.String:
case ReadValueResult.Binary:
{
<#+
	this.PushIndent( 1 );
	this.Success( null, resultVariable, "this.Read" + code + "Core( " + valueVariable.Integral() + " )" );
	this.PopIndent();
#>
}
<#+
} // WriteReadRawCore( string code, string headerVariable, DecodedVariable valueVariable, string resultVariable )

private void WriteReadObject()
{
	WriteReadBodyCore( "MessagePackObject", Nullability.Value, ( typeVar, valueVar, resultVar ) => this.WriteReadObjectCore( typeVar, valueVar, resultVar ) );
} // WriteReadObject()

private void WriteReadObjectCore( string typeVariable, DecodedVariable valueVariable, string resultVariable )
{
#>
case ReadValueResult.Nil:
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar();
		this.SuccessObject( resultVariable, "MessagePackObject.Nil", false );
		this.PopIndent();
#>
}
case ReadValueResult.Boolean:
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar();
		this.SuccessObject( resultVariable, valueVariable.Integral() + " != 0", true );
		this.PopIndent();
#>
}
<#+
	foreach( var entry in TypeCodeMappings )
	{
#>
case ReadValueResult.<#= entry.Code #>:
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar();
		this.SuccessObject(resultVariable, CastIfNecessary( GetSourceType( entry.CodeType ), entry.CodeType, false, valueVariable.Get( entry.CodeType ), false ), true );
		this.PopIndent();
#>
}
<#+
	} // foreach -- scalar

// Array/Map
#>
case ReadValueResult.ArrayLength:
{
	var length = <#= CastIfNecessary( typeof( long ), typeof( uint ), false, "this.ReadArrayLengthCore( " + valueVariable.Integral() + " )", false ) #>;
	if ( !isDeep )
	{
		<#= resultVariable #> = length;
		return true;
	}

	this.CheckLength( length, ReadValueResult.ArrayLength );
	var collection = new List<MessagePackObject>( unchecked( ( int ) length ) );
	for( var i = 0; i < length; i++ )
	{
		MessagePackObject item;
		if( !this.ReadSubtreeObject( /* isDeep */true, out item ) )
		{
			<#= resultVariable #> = default( MessagePackObject );
			return false;
		}

		collection.Add( item );
	}
	<#= resultVariable #> = new MessagePackObject( collection, /* isImmutable */true );
	return true;
}
case ReadValueResult.MapLength:
{
	var length = <#= CastIfNecessary( typeof( long ), typeof( uint ), false, "this.ReadMapLengthCore( " + valueVariable.Integral() + " )", false ) #>;
	if ( !isDeep )
	{
		<#= resultVariable #> = length;
		return true;
	}

	this.CheckLength( length, ReadValueResult.MapLength );
	var collection = new MessagePackObjectDictionary( unchecked( ( int ) length ) );
	for( var i = 0; i < length; i++ )
	{
		MessagePackObject key;
		if( !this.ReadSubtreeObject( /* isDeep */true, out key ) )
		{
			<#= resultVariable #> = default( MessagePackObject );
			return false;
		}

		MessagePackObject value;
		if( !this.ReadSubtreeObject( /* isDeep */true, out value ) )
		{
			<#= resultVariable #> = default( MessagePackObject );
			return false;
		}

		collection.Add( key, value );
	}
	<#= resultVariable #> = new MessagePackObject( collection, /* isImmutable */true );
	return true;
}

<#+
// Array/Map

#>
case ReadValueResult.String:
{
<#+
		this.PushIndent( 1 );
		this.SuccessObject(
			resultVariable, 
			"new MessagePackObject( new MessagePackString( " + "this.ReadBinaryCore( " + valueVariable.Integral() + " )" + ", false ) )",
			false
		);
		this.PopIndent();
#>
}
case ReadValueResult.Binary:
{
<#+
		this.PushIndent( 1 );
		this.SuccessObject(
			resultVariable, 
			"new MessagePackObject( new MessagePackString( this.ReadBinaryCore( " + valueVariable.Integral() + " )" + ", true ) )",
			false
		);
		this.PopIndent();
#>
}
<#+
	this.WriteReadExtCore( typeVariable, resultVariable, true );
} // WriteReadObjectCore( string typeVariable, DecodedVariable valueVariable, string resultVariable, bool isAsync )


private void WriteReadExt()
{
	WriteReadBodyCore( "MessagePackExtendedTypeObject", Nullability.Value, ( typeVar, v, resultVar ) => this.WriteReadExtCore( typeVar, resultVar, false ) );
} // WriteReadExt( bool isAsync )

private void WriteReadExtCore( string typeVariable, string resultVariable, bool isMpo )
{

	foreach( var code in ExtCodes )
	{
#>
case ReadValueResult.<#= code #>:
<#+
	} // foreach
#>
{
<#+
	var expression =
		"this.ReadMessagePackExtendedTypeObjectCore( " + typeVariable + " )";

	this.PushIndent( 1 );

	if( !isMpo )
	{
		this.Success( null, resultVariable, expression );
	}
	else
	{
		this.SuccessObject( resultVariable, expression, true );
	}

	this.PopIndent();
#>
}
<#+
} // WriteReadExtCore( string headerVariable, string resultVariable, bool isAsync )


private void OnReturnScalar()
{
#>
this.InternalCollectionType = CollectionType.None;
<#+
} // OnReturnScalar()


private bool CanConvertTo( Type destination, int size )
{
	switch( Type.GetTypeCode( destination ) )
	{
		case TypeCode.Single:
		case TypeCode.Double:
		{
			return true;
		}
		default:
		{
			return System.Runtime.InteropServices.Marshal.SizeOf( destination ) >= size / 8;
		}
	}
} // CanConvertTo( Type destination, String source )

private static string CastIfNecessary( Type sourceType, Type targetType, bool shouldCheckOverflow, string sourceExpression, bool shouldInsertUInt64Cast )
{
	if ( sourceType == targetType )
	{
		return 
			shouldInsertUInt64Cast
			? String.Format( CultureInfo.InvariantCulture, "unchecked( ( UInt64 ){0} )", sourceExpression )
			: sourceExpression;
	}

	if( sourceType == typeof( float ) )
	{
		if( targetType == typeof( double ) )
		{
			return sourceExpression;
		}
	}
	else if( sourceType != typeof( double ) )
	{
		if( targetType == typeof( long ) )
		{
			return 
				shouldInsertUInt64Cast
				? String.Format( CultureInfo.InvariantCulture, "checked( ( Int64 )( UInt64 ){0} )", sourceExpression )
				: sourceExpression;
		}

		if ( targetType == typeof( float ) || targetType == typeof( double ) )
		{
			return 
				shouldInsertUInt64Cast
				? String.Format( CultureInfo.InvariantCulture, "unchecked( ( UInt64 ){0} )", sourceExpression )
				: sourceExpression;
		}
	}

	return String.Format( CultureInfo.InvariantCulture, "{0}( ( {1} ){2}{3} )", ( shouldCheckOverflow ? "checked" : "unchecked" ), targetType.Name, ( shouldInsertUInt64Cast ? "( UInt64 )" : String.Empty ), sourceExpression );
} // CastIfNecessary( Type sourceType, Type targetType, bool shouldCheckOverflow, string sourceExpression )

private static Type GetSourceType( Type targetType )
{
	return 
		targetType == typeof( float )
		? typeof( float )
		: targetType == typeof( double )
		? typeof( double )
		: typeof( long );
}
private void Success( string type, string resultVariable, string expression )
{
#>
<#= resultVariable #> = <#= expression #>;
return true;
<#+
} // Sucess( string resultVariable, string expression, bool isAsync )

private void SuccessWithLengthCheck( string code, string resultVariable, string expression )
{
#>
<#= resultVariable #> = <#= expression #>;
this.CheckLength( <#= resultVariable #>, ReadValueResult.<#= code #> );
return true;
<#+
} // SuccessWithLengthCheck( string type, string resultVariable, string expression, bool isAsync )

private void SuccessObject( string resultVariable, string expression, bool withTypeVariable )
{
#>
<#= resultVariable #> = <#= expression #>;
this.InternalData = <#= resultVariable #>;
return true;
<#+
} // SuccessObject( string resultVariable, string expression )

private void Fail( string resultVariable, string typeName )
{
#>
<#= resultVariable #> = default( <#= typeName #> );
return false;
<#+
} // Fail( string resultVariable, string typeName )

private enum Nullability
{
	Reference,
	Value,
	Nullable
}

private class DecodedVariable
{
	private readonly string _integral;
	private readonly string _real32;
	private readonly string _real64;

	public DecodedVariable( string integral, string real32, string real64 )
	{
		this._integral = integral;
		this._real32 = real32;
		this._real64 = real64;
	}

	public string Get( Type type )
	{
		if( type == typeof( float ) )
		{
			return this.Real32();
		}

		if( type == typeof( double ) )
		{
			return this.Real64();
		}

		return this.Integral();
	}

	public string Integral()
	{
		return this.GetVariable( this._integral );
	}

	public string Real32()
	{
		return this.GetVariable( this._real32 );
	}

	public string Real64()
	{
		return this.GetVariable( this._real64 );
	}

	private string GetVariable( string name )
	{
		return name;
	}
}
#>
<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#
Type[] _valueTypes =
	new []
	{
		typeof( sbyte ), typeof( short ), typeof( int ), typeof( long ),
		typeof( byte ), typeof( ushort ), typeof( uint ), typeof( ulong ),
		typeof( float ), typeof( double ),
		typeof( bool )
	};
#>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2013 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Threading;

namespace MsgPack.Serialization.Metadata
{
	// This file was generated from _Unpacker.Read.tt and StreamingUnapkcerBase.ttinclude T4Template.
	// Do not modify this file. Edit _Unpacker.Read.tt and StreamingUnapkcerBase.ttinclude instead.

	partial class _UnpackHelpers
	{
		private static readonly Dictionary<Type,MethodInfo> _directUnpackMethods;

<#
foreach( var type in _valueTypes )
{
#>
		public static readonly MethodInfo Unpack<#= type.Name #>Value;
<#
}
#>
		public static readonly MethodInfo UnpackStringValue;
		public static readonly MethodInfo UnpackBinaryValue;
		public static readonly MethodInfo UnpackObjectValue;

		static _UnpackHelpers()
		{
			var directUnpackMethods = new Dictionary<Type, MethodInfo>( <#= _valueTypes.Length + 3 #> );
<#
foreach( var type in _valueTypes )
{
	// NOTE: Allways use nullable version for nil implication.
#>
			
			Unpack<#= type.Name #>Value = typeof( Unpacker ).GetMethod( "Unpack<#= type.Name #>Value" );
			directUnpackMethods.Add( typeof( <#= type.Name #>? ), Unpack<#= type.Name #>Value );
<#
}
#>
			UnpackStringValue = typeof( Unpacker ).GetMethod( "UnpackStringValue" );
			directUnpackMethods.Add( typeof( string ), UnpackStringValue );
			UnpackBinaryValue = typeof( Unpacker ).GetMethod( "UnpackBinaryValue" );
			directUnpackMethods.Add( typeof( byte[] ), UnpackBinaryValue );
			UnpackObjectValue = typeof( Unpacker ).GetMethod( "UnpackObjectValue" );
			directUnpackMethods.Add( typeof( MessagePackObject ), UnpackObjectValue );

			Interlocked.Exchange( ref _directUnpackMethods, directUnpackMethods );
		}

		public static MethodInfo GetDirectUnpackMethod( Type type )
		{
			MethodInfo result;
			_directUnpackMethods.TryGetValue( type, out result );
			return result;
		}
	}
}
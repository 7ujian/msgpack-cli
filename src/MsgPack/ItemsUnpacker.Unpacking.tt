<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ include file="..\Core.ttinclude" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Runtime.InteropServices" #>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2015 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

#if UNITY_5 || UNITY_STANDALONE || UNITY_WEBPLAYER || UNITY_WII || UNITY_IPHONE || UNITY_ANDROID || UNITY_PS3 || UNITY_XBOX360 || UNITY_FLASH || UNITY_BKACKBERRY || UNITY_WINRT
#define UNITY
#endif

using System;
using System.Text;

namespace MsgPack
{
	// This file was generated from ItemsUnpacker.Unpacking.tt and StreamingUnapkcerBase.ttinclude T4Template.
	// Do not modify this file. Edit ItemsUnpacker.Unpacking.tt and StreamingUnapkcerBase.ttinclude instead.

	partial class ItemsUnpacker
	{
		private ReadValueResult ReadValue( out byte header, out long integral, out float real32, out double real64 )
		{
			var readHeader = this.ReadByteFromSource();
			// This is BAD practice for out, but it reduces IL size very well for this method.
			integral = default( long );
			real32 = default( float );
			real64 = default( double );

			if ( readHeader < 0 )
			{
				header = 0;
				return ReadValueResult.Eof;
			}

			header = unchecked( ( byte )readHeader );
			switch ( header >> 4 )
			{
				case 0x0:
				case 0x1:
				case 0x2:
				case 0x3:
				case 0x4:
				case 0x5:
				case 0x6:
				case 0x7:
				{
					// PositiveFixNum
					this.InternalCollectionType = CollectionType.None;
					integral = header;
<#
					ReturnValue( "Byte" );
#>
				}
				case 0x8:
				{
					// FixMap
					integral = header & 0xF;
<#
					ReturnValue( "MapLength" );
#>
				}
				case 0x9:
				{
					// FixArray
					integral = header & 0xF;
<#
					ReturnValue( "ArrayLength" );
#>
				}
				case 0xA:
				case 0xB:
				{
					// FixRaw
					integral = header & 0x1F;
<#
					ReturnValue( "String" );
#>
				}
				case 0xE:
				case 0xF:
				{
					// NegativeFixNum
					this.InternalCollectionType = CollectionType.None;
					integral = header | unchecked( ( long )0xFFFFFFFFFFFFFF00 );
<#
					ReturnValue( "SByte" );
#>
				}
			}

			switch ( header )
			{
				case MessagePackCode.NilValue:
				{
<#
					ReturnValue( "Nil" );
#>
				}
				case MessagePackCode.TrueValue:
				{
					integral = 1;
<#
					ReturnValue( "Boolean" );
#>
				}
				case MessagePackCode.FalseValue:
				{
					integral = 0;
<#
					ReturnValue( "Boolean" );
#>
				}
				case MessagePackCode.SignedInt8:
				{
					<#= ReadStrict( "sbyte" ) #>;
					integral = BigEndianBinary.ToSByte( this._scalarBuffer, 0 );
<#
					ReturnValue( "SByte" );
#>
				}
				case MessagePackCode.SignedInt16:
				{
					<#= ReadStrict( "short" ) #>;
					integral = BigEndianBinary.ToInt16( this._scalarBuffer, 0 );
<#
					ReturnValue( "Int16" );
#>
				}
				case MessagePackCode.SignedInt32:
				{
					<#= ReadStrict( "int" ) #>;
					integral = BigEndianBinary.ToInt32( this._scalarBuffer, 0 );
<#
					ReturnValue( "Int32" );
#>
				}
				case MessagePackCode.SignedInt64:
				{
					<#= ReadStrict( "long" ) #>;
					integral = BigEndianBinary.ToInt64( this._scalarBuffer, 0 );
<#
					ReturnValue( "Int64" );
#>
				}
				case MessagePackCode.UnsignedInt8:
				{
					<#= ReadStrict( "byte" ) #>;
					integral = BigEndianBinary.ToByte( this._scalarBuffer, 0 );
<#
					ReturnValue( "Byte" );
#>
				}
				case MessagePackCode.UnsignedInt16:
				{
					<#= ReadStrict( "ushort" ) #>;
					integral = BigEndianBinary.ToUInt16( this._scalarBuffer, 0 );
<#
					ReturnValue( "UInt16" );
#>
				}
				case MessagePackCode.UnsignedInt32:
				{
					<#= ReadStrict( "uint" ) #>;
					integral = BigEndianBinary.ToUInt32( this._scalarBuffer, 0 );
<#
					ReturnValue( "UInt32" );
#>
				}
				case MessagePackCode.UnsignedInt64:
				{
					<#= ReadStrict( "ulong" ) #>;
					integral = unchecked( ( long )BigEndianBinary.ToUInt64( this._scalarBuffer, 0 ) );
<#
					ReturnValue( "UInt64" );
#>
				}
				case MessagePackCode.Real32:
				{
					<#= ReadStrict( "float" ) #>;
					real32 = BigEndianBinary.ToSingle( this._scalarBuffer, 0 );
<#
					ReturnValue( "Single" );
#>
				}
				case MessagePackCode.Real64:
				{
					<#= ReadStrict( "double" ) #>;
					real64 = BigEndianBinary.ToDouble( this._scalarBuffer, 0 );
<#
					ReturnValue( "Double" );
#>
				}
				case MessagePackCode.Bin8:
				{
					<#= ReadStrict( "byte" ) #>;
					integral = BigEndianBinary.ToByte( this._scalarBuffer, 0 );
<#
					ReturnValue( "Binary" );
#>
				}
				case MessagePackCode.Str8:
				{
					<#= ReadStrict( "byte" ) #>;
					integral = BigEndianBinary.ToByte( this._scalarBuffer, 0 );
<#
					ReturnValue( "String" );
#>
				}
				case MessagePackCode.Bin16:
				{
					<#= ReadStrict( "ushort" ) #>;
					integral = BigEndianBinary.ToUInt16( this._scalarBuffer, 0 );
<#
					ReturnValue( "Binary" );
#>
				}
				case MessagePackCode.Raw16:
				{
					<#= ReadStrict( "ushort" ) #>;
					integral = BigEndianBinary.ToUInt16( this._scalarBuffer, 0 );
<#
					ReturnValue( "String" );
#>
				}
				case MessagePackCode.Bin32:
				{
					<#= ReadStrict( "uint" ) #>;
					integral = BigEndianBinary.ToUInt32( this._scalarBuffer, 0 );
<#
					ReturnValue( "Binary" );
#>
				}
				case MessagePackCode.Raw32:
				{
					<#= ReadStrict( "uint" ) #>;
					integral = BigEndianBinary.ToUInt32( this._scalarBuffer, 0 );
<#
					ReturnValue( "String" );
#>
				}
				case MessagePackCode.Array16:
				{
					<#= ReadStrict( "ushort" ) #>;
					integral = BigEndianBinary.ToUInt16( this._scalarBuffer, 0 );
<#
					ReturnValue( "ArrayLength" );
#>
				}
				case MessagePackCode.Array32:
				{
					<#= ReadStrict( "uint" ) #>;
					integral = BigEndianBinary.ToUInt32( this._scalarBuffer, 0 );
<#
					ReturnValue( "ArrayLength" );
#>
				}
				case MessagePackCode.Map16:
				{
					<#= ReadStrict( "ushort" ) #>;
					integral = BigEndianBinary.ToUInt16( this._scalarBuffer, 0 );
<#
					ReturnValue( "MapLength" );
#>
				}
				case MessagePackCode.Map32:
				{
					<#= ReadStrict( "uint" ) #>;
					integral = BigEndianBinary.ToUInt32( this._scalarBuffer, 0 );
<#
					ReturnValue( "MapLength" );
#>
				}
				case MessagePackCode.FixExt1:
				{
<#
					ReturnValue( "FixExt1" );
#>
				}
				case MessagePackCode.FixExt2:
				{
<#
					ReturnValue( "FixExt2" );
#>
				}
				case MessagePackCode.FixExt4:
				{
<#
					ReturnValue( "FixExt4" );
#>
				}
				case MessagePackCode.FixExt8:
				{
<#
					ReturnValue( "FixExt8" );
#>
				}
				case MessagePackCode.FixExt16:
				{
<#
					ReturnValue( "FixExt16" );
#>
				}
				case MessagePackCode.Ext8:
				{
<#
					ReturnValue( "Ext8" );
#>
				}
				case MessagePackCode.Ext16:
				{
<#
					ReturnValue( "Ext16" );
#>
				}
				case MessagePackCode.Ext32:
				{
<#
					ReturnValue( "Ext32" );
#>
				}
				default:
				{
					ThrowUnassingedMessageTypeException( readHeader );
					// Never reach
<#
					ReturnValue( "Eof" );
#>
				}
			}
		}

		private long ReadArrayLengthCore( long length )
		{
			this.InternalCollectionType = CollectionType.Array;
			this.InternalItemsCount = length;
			this.InternalData = unchecked( ( uint )length );
			return length;
		}

		private long ReadMapLengthCore( long length )
		{
			this.InternalCollectionType = CollectionType.Map;
			this.InternalItemsCount = length;
			this.InternalData = unchecked( ( uint )length );
			return length;
		}

		private byte[] ReadBinaryCore( long length )
		{
			if ( length == 0 )
			{
				this.InternalCollectionType = CollectionType.None;
				return Binary.Empty;
			}

			this.CheckLength( length, ReadValueResult.Binary );
			var buffer = new byte[ length ];
			this.ReadStrict( buffer, buffer.Length );
			this.InternalCollectionType = CollectionType.None;
			return buffer;
		}

		private string ReadStringCore( long length )
		{
			if ( length == 0 )
			{
				this.InternalCollectionType = CollectionType.None;
				return String.Empty;
			}

			this.CheckLength( length, ReadValueResult.String );

			var length32 = unchecked( ( int )length );
			var bytes = BufferManager.GetByteBuffer();
#if DEBUG
			try
			{
#endif // DEBUG

				if ( length32 <= bytes.Length )
				{
					this.ReadStrict( bytes, length32 );
					var result = Encoding.UTF8.GetString( bytes, 0, length32 );
					this.InternalCollectionType = CollectionType.None;
					return result;
				}

				var decoder = Encoding.UTF8.GetDecoder();
				var chars = BufferManager.GetCharBuffer();
#if DEBUG
				try
				{
#endif // DEBUG
					var stringBuffer = new StringBuilder( Math.Min( length32, Int32.MaxValue ) );
					var remaining = length32;
					do
					{
						var reading = Math.Min( remaining, bytes.Length );
						var bytesRead = this._source.Read( bytes, 0, reading );
						this._offset += bytesRead;
						if ( bytesRead == 0 )
						{
							this.ThrowEofException( 0, reading );
						}

						remaining -= bytesRead;

						var isCompleted = false;
						var bytesOffset = 0;

						while ( !isCompleted )
						{
							int bytesUsed;
							int charsUsed;
							decoder.Convert(
								bytes,
								bytesOffset,
								bytesRead - bytesOffset,
								chars,
								0,
								chars.Length,
								( bytesRead == 0 ),
								// flush when last read.
								out bytesUsed,
								out charsUsed,
								out isCompleted
							);

							stringBuffer.Append( chars, 0, charsUsed );
							bytesOffset += bytesUsed;
						}
					} while ( remaining > 0 );

					this.InternalCollectionType = CollectionType.None;
					return stringBuffer.ToString();
#if DEBUG
				}
				finally
				{
					BufferManager.ReleaseCharBuffer();
				}
			}
			finally
			{
				BufferManager.ReleaseByteBuffer();
			}
#endif // DEBUG
		}

		private MessagePackExtendedTypeObject ReadMessagePackExtendedTypeObjectCore( ReadValueResult type )
		{
			byte typeCode;
			uint length;
			switch ( type )
			{
				case ReadValueResult.FixExt1:
				{
					typeCode = <#= ReadByteStrict() #>;
					length = 1;
					break;
				}
				case ReadValueResult.FixExt2:
				{
					typeCode = <#= ReadByteStrict() #>;
					length = 2;
					break;
				}
				case ReadValueResult.FixExt4:
				{
					typeCode = <#= ReadByteStrict() #>;
					length = 4;
					break;
				}
				case ReadValueResult.FixExt8:
				{
					typeCode = <#= ReadByteStrict() #>;
					length = 8;
					break;
				}
				case ReadValueResult.FixExt16:
				{
					typeCode = <#= ReadByteStrict() #>;
					length = 16;
					break;
				}
				case ReadValueResult.Ext8:
				{
					<#= ReadStrict( "byte" ) #>;
					length = BigEndianBinary.ToByte( this._scalarBuffer, 0 );
					typeCode = this.ReadByteStrict();
					break;
				}
				case ReadValueResult.Ext16:
				{
					<#= ReadStrict( "ushort" ) #>;
					length = BigEndianBinary.ToUInt16( this._scalarBuffer, 0 );
					typeCode = this.ReadByteStrict();
					break;
				}
				case ReadValueResult.Ext32:
				{
					<#= ReadStrict( "uint" ) #>;
					length = BigEndianBinary.ToUInt32( this._scalarBuffer, 0 );
					typeCode = this.ReadByteStrict();
					break;
				}
				default:
				{
					ThrowUnexpectedExtCodeException( type );
					return default( MessagePackExtendedTypeObject ); // Never reach
				}
			}

			var data = new byte[ length ];
			this.ReadStrict( data, data.Length );
			this.InternalCollectionType = CollectionType.None;
			return new MessagePackExtendedTypeObject( typeCode, data );
		}
	}
}
<#+
private static string ReadStrict( string type )
{
	return 
		"this.ReadStrict" + 
		"( this._scalarBuffer, sizeof( " + type + " )" +
		" )";
}

private static string ReadByteStrict()
{
	return "this.ReadByteStrict()";
}


private void ReturnValue( string type )
{
#>
					return ReadValueResult.<#= type #>;
<#+
}
#>